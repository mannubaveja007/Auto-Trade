
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Vendor
 * 
 */
export type Vendor = $Result.DefaultSelection<Prisma.$VendorPayload>
/**
 * Model Buyer
 * 
 */
export type Buyer = $Result.DefaultSelection<Prisma.$BuyerPayload>
/**
 * Model ProcurementRequest
 * 
 */
export type ProcurementRequest = $Result.DefaultSelection<Prisma.$ProcurementRequestPayload>
/**
 * Model Quote
 * 
 */
export type Quote = $Result.DefaultSelection<Prisma.$QuotePayload>
/**
 * Model NegotiationMessage
 * 
 */
export type NegotiationMessage = $Result.DefaultSelection<Prisma.$NegotiationMessagePayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Vendors
 * const vendors = await prisma.vendor.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Vendors
   * const vendors = await prisma.vendor.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.vendor`: Exposes CRUD operations for the **Vendor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendors
    * const vendors = await prisma.vendor.findMany()
    * ```
    */
  get vendor(): Prisma.VendorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.buyer`: Exposes CRUD operations for the **Buyer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Buyers
    * const buyers = await prisma.buyer.findMany()
    * ```
    */
  get buyer(): Prisma.BuyerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.procurementRequest`: Exposes CRUD operations for the **ProcurementRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProcurementRequests
    * const procurementRequests = await prisma.procurementRequest.findMany()
    * ```
    */
  get procurementRequest(): Prisma.ProcurementRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.quote`: Exposes CRUD operations for the **Quote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quotes
    * const quotes = await prisma.quote.findMany()
    * ```
    */
  get quote(): Prisma.QuoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.negotiationMessage`: Exposes CRUD operations for the **NegotiationMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NegotiationMessages
    * const negotiationMessages = await prisma.negotiationMessage.findMany()
    * ```
    */
  get negotiationMessage(): Prisma.NegotiationMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.1
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Vendor: 'Vendor',
    Buyer: 'Buyer',
    ProcurementRequest: 'ProcurementRequest',
    Quote: 'Quote',
    NegotiationMessage: 'NegotiationMessage',
    Order: 'Order'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "vendor" | "buyer" | "procurementRequest" | "quote" | "negotiationMessage" | "order"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Vendor: {
        payload: Prisma.$VendorPayload<ExtArgs>
        fields: Prisma.VendorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VendorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VendorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findFirst: {
            args: Prisma.VendorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VendorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findMany: {
            args: Prisma.VendorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          create: {
            args: Prisma.VendorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          createMany: {
            args: Prisma.VendorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VendorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          delete: {
            args: Prisma.VendorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          update: {
            args: Prisma.VendorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          deleteMany: {
            args: Prisma.VendorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VendorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VendorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          upsert: {
            args: Prisma.VendorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          aggregate: {
            args: Prisma.VendorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVendor>
          }
          groupBy: {
            args: Prisma.VendorGroupByArgs<ExtArgs>
            result: $Utils.Optional<VendorGroupByOutputType>[]
          }
          count: {
            args: Prisma.VendorCountArgs<ExtArgs>
            result: $Utils.Optional<VendorCountAggregateOutputType> | number
          }
        }
      }
      Buyer: {
        payload: Prisma.$BuyerPayload<ExtArgs>
        fields: Prisma.BuyerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuyerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuyerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          findFirst: {
            args: Prisma.BuyerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuyerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          findMany: {
            args: Prisma.BuyerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>[]
          }
          create: {
            args: Prisma.BuyerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          createMany: {
            args: Prisma.BuyerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BuyerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>[]
          }
          delete: {
            args: Prisma.BuyerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          update: {
            args: Prisma.BuyerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          deleteMany: {
            args: Prisma.BuyerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuyerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BuyerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>[]
          }
          upsert: {
            args: Prisma.BuyerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          aggregate: {
            args: Prisma.BuyerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuyer>
          }
          groupBy: {
            args: Prisma.BuyerGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuyerGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuyerCountArgs<ExtArgs>
            result: $Utils.Optional<BuyerCountAggregateOutputType> | number
          }
        }
      }
      ProcurementRequest: {
        payload: Prisma.$ProcurementRequestPayload<ExtArgs>
        fields: Prisma.ProcurementRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProcurementRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProcurementRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementRequestPayload>
          }
          findFirst: {
            args: Prisma.ProcurementRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProcurementRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementRequestPayload>
          }
          findMany: {
            args: Prisma.ProcurementRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementRequestPayload>[]
          }
          create: {
            args: Prisma.ProcurementRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementRequestPayload>
          }
          createMany: {
            args: Prisma.ProcurementRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProcurementRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementRequestPayload>[]
          }
          delete: {
            args: Prisma.ProcurementRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementRequestPayload>
          }
          update: {
            args: Prisma.ProcurementRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementRequestPayload>
          }
          deleteMany: {
            args: Prisma.ProcurementRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProcurementRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProcurementRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementRequestPayload>[]
          }
          upsert: {
            args: Prisma.ProcurementRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcurementRequestPayload>
          }
          aggregate: {
            args: Prisma.ProcurementRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProcurementRequest>
          }
          groupBy: {
            args: Prisma.ProcurementRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProcurementRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProcurementRequestCountArgs<ExtArgs>
            result: $Utils.Optional<ProcurementRequestCountAggregateOutputType> | number
          }
        }
      }
      Quote: {
        payload: Prisma.$QuotePayload<ExtArgs>
        fields: Prisma.QuoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          findFirst: {
            args: Prisma.QuoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          findMany: {
            args: Prisma.QuoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>[]
          }
          create: {
            args: Prisma.QuoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          createMany: {
            args: Prisma.QuoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>[]
          }
          delete: {
            args: Prisma.QuoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          update: {
            args: Prisma.QuoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          deleteMany: {
            args: Prisma.QuoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>[]
          }
          upsert: {
            args: Prisma.QuoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotePayload>
          }
          aggregate: {
            args: Prisma.QuoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuote>
          }
          groupBy: {
            args: Prisma.QuoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuoteCountArgs<ExtArgs>
            result: $Utils.Optional<QuoteCountAggregateOutputType> | number
          }
        }
      }
      NegotiationMessage: {
        payload: Prisma.$NegotiationMessagePayload<ExtArgs>
        fields: Prisma.NegotiationMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NegotiationMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegotiationMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NegotiationMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegotiationMessagePayload>
          }
          findFirst: {
            args: Prisma.NegotiationMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegotiationMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NegotiationMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegotiationMessagePayload>
          }
          findMany: {
            args: Prisma.NegotiationMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegotiationMessagePayload>[]
          }
          create: {
            args: Prisma.NegotiationMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegotiationMessagePayload>
          }
          createMany: {
            args: Prisma.NegotiationMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NegotiationMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegotiationMessagePayload>[]
          }
          delete: {
            args: Prisma.NegotiationMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegotiationMessagePayload>
          }
          update: {
            args: Prisma.NegotiationMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegotiationMessagePayload>
          }
          deleteMany: {
            args: Prisma.NegotiationMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NegotiationMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NegotiationMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegotiationMessagePayload>[]
          }
          upsert: {
            args: Prisma.NegotiationMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegotiationMessagePayload>
          }
          aggregate: {
            args: Prisma.NegotiationMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNegotiationMessage>
          }
          groupBy: {
            args: Prisma.NegotiationMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<NegotiationMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.NegotiationMessageCountArgs<ExtArgs>
            result: $Utils.Optional<NegotiationMessageCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    vendor?: VendorOmit
    buyer?: BuyerOmit
    procurementRequest?: ProcurementRequestOmit
    quote?: QuoteOmit
    negotiationMessage?: NegotiationMessageOmit
    order?: OrderOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type VendorCountOutputType
   */

  export type VendorCountOutputType = {
    quotes: number
    orders: number
  }

  export type VendorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quotes?: boolean | VendorCountOutputTypeCountQuotesArgs
    orders?: boolean | VendorCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorCountOutputType
     */
    select?: VendorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeCountQuotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuoteWhereInput
  }

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * Count Type BuyerCountOutputType
   */

  export type BuyerCountOutputType = {
    procurementRequests: number
    orders: number
  }

  export type BuyerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    procurementRequests?: boolean | BuyerCountOutputTypeCountProcurementRequestsArgs
    orders?: boolean | BuyerCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * BuyerCountOutputType without action
   */
  export type BuyerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerCountOutputType
     */
    select?: BuyerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BuyerCountOutputType without action
   */
  export type BuyerCountOutputTypeCountProcurementRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcurementRequestWhereInput
  }

  /**
   * BuyerCountOutputType without action
   */
  export type BuyerCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * Count Type ProcurementRequestCountOutputType
   */

  export type ProcurementRequestCountOutputType = {
    quotes: number
    orders: number
  }

  export type ProcurementRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quotes?: boolean | ProcurementRequestCountOutputTypeCountQuotesArgs
    orders?: boolean | ProcurementRequestCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * ProcurementRequestCountOutputType without action
   */
  export type ProcurementRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcurementRequestCountOutputType
     */
    select?: ProcurementRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProcurementRequestCountOutputType without action
   */
  export type ProcurementRequestCountOutputTypeCountQuotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuoteWhereInput
  }

  /**
   * ProcurementRequestCountOutputType without action
   */
  export type ProcurementRequestCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * Count Type QuoteCountOutputType
   */

  export type QuoteCountOutputType = {
    negotiations: number
    orders: number
  }

  export type QuoteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    negotiations?: boolean | QuoteCountOutputTypeCountNegotiationsArgs
    orders?: boolean | QuoteCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * QuoteCountOutputType without action
   */
  export type QuoteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuoteCountOutputType
     */
    select?: QuoteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuoteCountOutputType without action
   */
  export type QuoteCountOutputTypeCountNegotiationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NegotiationMessageWhereInput
  }

  /**
   * QuoteCountOutputType without action
   */
  export type QuoteCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Vendor
   */

  export type AggregateVendor = {
    _count: VendorCountAggregateOutputType | null
    _avg: VendorAvgAggregateOutputType | null
    _sum: VendorSumAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  export type VendorAvgAggregateOutputType = {
    rating: number | null
    minOrderValue: number | null
  }

  export type VendorSumAggregateOutputType = {
    rating: number | null
    minOrderValue: number | null
  }

  export type VendorMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    rating: number | null
    verified: boolean | null
    minOrderValue: number | null
    paymentTerms: string | null
    createdAt: Date | null
  }

  export type VendorMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    rating: number | null
    verified: boolean | null
    minOrderValue: number | null
    paymentTerms: string | null
    createdAt: Date | null
  }

  export type VendorCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    address: number
    categories: number
    rating: number
    verified: number
    minOrderValue: number
    paymentTerms: number
    createdAt: number
    _all: number
  }


  export type VendorAvgAggregateInputType = {
    rating?: true
    minOrderValue?: true
  }

  export type VendorSumAggregateInputType = {
    rating?: true
    minOrderValue?: true
  }

  export type VendorMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    rating?: true
    verified?: true
    minOrderValue?: true
    paymentTerms?: true
    createdAt?: true
  }

  export type VendorMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    rating?: true
    verified?: true
    minOrderValue?: true
    paymentTerms?: true
    createdAt?: true
  }

  export type VendorCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    categories?: true
    rating?: true
    verified?: true
    minOrderValue?: true
    paymentTerms?: true
    createdAt?: true
    _all?: true
  }

  export type VendorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendor to aggregate.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vendors
    **/
    _count?: true | VendorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VendorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VendorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendorMaxAggregateInputType
  }

  export type GetVendorAggregateType<T extends VendorAggregateArgs> = {
        [P in keyof T & keyof AggregateVendor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendor[P]>
      : GetScalarType<T[P], AggregateVendor[P]>
  }




  export type VendorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendorWhereInput
    orderBy?: VendorOrderByWithAggregationInput | VendorOrderByWithAggregationInput[]
    by: VendorScalarFieldEnum[] | VendorScalarFieldEnum
    having?: VendorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendorCountAggregateInputType | true
    _avg?: VendorAvgAggregateInputType
    _sum?: VendorSumAggregateInputType
    _min?: VendorMinAggregateInputType
    _max?: VendorMaxAggregateInputType
  }

  export type VendorGroupByOutputType = {
    id: string
    name: string
    email: string
    phone: string | null
    address: string | null
    categories: string[]
    rating: number
    verified: boolean
    minOrderValue: number
    paymentTerms: string
    createdAt: Date
    _count: VendorCountAggregateOutputType | null
    _avg: VendorAvgAggregateOutputType | null
    _sum: VendorSumAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  type GetVendorGroupByPayload<T extends VendorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VendorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendorGroupByOutputType[P]>
            : GetScalarType<T[P], VendorGroupByOutputType[P]>
        }
      >
    >


  export type VendorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    categories?: boolean
    rating?: boolean
    verified?: boolean
    minOrderValue?: boolean
    paymentTerms?: boolean
    createdAt?: boolean
    quotes?: boolean | Vendor$quotesArgs<ExtArgs>
    orders?: boolean | Vendor$ordersArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    categories?: boolean
    rating?: boolean
    verified?: boolean
    minOrderValue?: boolean
    paymentTerms?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    categories?: boolean
    rating?: boolean
    verified?: boolean
    minOrderValue?: boolean
    paymentTerms?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    categories?: boolean
    rating?: boolean
    verified?: boolean
    minOrderValue?: boolean
    paymentTerms?: boolean
    createdAt?: boolean
  }

  export type VendorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "address" | "categories" | "rating" | "verified" | "minOrderValue" | "paymentTerms" | "createdAt", ExtArgs["result"]["vendor"]>
  export type VendorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quotes?: boolean | Vendor$quotesArgs<ExtArgs>
    orders?: boolean | Vendor$ordersArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VendorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type VendorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $VendorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vendor"
    objects: {
      quotes: Prisma.$QuotePayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      phone: string | null
      address: string | null
      categories: string[]
      rating: number
      verified: boolean
      minOrderValue: number
      paymentTerms: string
      createdAt: Date
    }, ExtArgs["result"]["vendor"]>
    composites: {}
  }

  type VendorGetPayload<S extends boolean | null | undefined | VendorDefaultArgs> = $Result.GetResult<Prisma.$VendorPayload, S>

  type VendorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VendorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VendorCountAggregateInputType | true
    }

  export interface VendorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vendor'], meta: { name: 'Vendor' } }
    /**
     * Find zero or one Vendor that matches the filter.
     * @param {VendorFindUniqueArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VendorFindUniqueArgs>(args: SelectSubset<T, VendorFindUniqueArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Vendor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VendorFindUniqueOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VendorFindUniqueOrThrowArgs>(args: SelectSubset<T, VendorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vendor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VendorFindFirstArgs>(args?: SelectSubset<T, VendorFindFirstArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vendor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VendorFindFirstOrThrowArgs>(args?: SelectSubset<T, VendorFindFirstOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Vendors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendors
     * const vendors = await prisma.vendor.findMany()
     * 
     * // Get first 10 Vendors
     * const vendors = await prisma.vendor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendorWithIdOnly = await prisma.vendor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VendorFindManyArgs>(args?: SelectSubset<T, VendorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Vendor.
     * @param {VendorCreateArgs} args - Arguments to create a Vendor.
     * @example
     * // Create one Vendor
     * const Vendor = await prisma.vendor.create({
     *   data: {
     *     // ... data to create a Vendor
     *   }
     * })
     * 
     */
    create<T extends VendorCreateArgs>(args: SelectSubset<T, VendorCreateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Vendors.
     * @param {VendorCreateManyArgs} args - Arguments to create many Vendors.
     * @example
     * // Create many Vendors
     * const vendor = await prisma.vendor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VendorCreateManyArgs>(args?: SelectSubset<T, VendorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Vendors and returns the data saved in the database.
     * @param {VendorCreateManyAndReturnArgs} args - Arguments to create many Vendors.
     * @example
     * // Create many Vendors
     * const vendor = await prisma.vendor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Vendors and only return the `id`
     * const vendorWithIdOnly = await prisma.vendor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VendorCreateManyAndReturnArgs>(args?: SelectSubset<T, VendorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Vendor.
     * @param {VendorDeleteArgs} args - Arguments to delete one Vendor.
     * @example
     * // Delete one Vendor
     * const Vendor = await prisma.vendor.delete({
     *   where: {
     *     // ... filter to delete one Vendor
     *   }
     * })
     * 
     */
    delete<T extends VendorDeleteArgs>(args: SelectSubset<T, VendorDeleteArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Vendor.
     * @param {VendorUpdateArgs} args - Arguments to update one Vendor.
     * @example
     * // Update one Vendor
     * const vendor = await prisma.vendor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VendorUpdateArgs>(args: SelectSubset<T, VendorUpdateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Vendors.
     * @param {VendorDeleteManyArgs} args - Arguments to filter Vendors to delete.
     * @example
     * // Delete a few Vendors
     * const { count } = await prisma.vendor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VendorDeleteManyArgs>(args?: SelectSubset<T, VendorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VendorUpdateManyArgs>(args: SelectSubset<T, VendorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors and returns the data updated in the database.
     * @param {VendorUpdateManyAndReturnArgs} args - Arguments to update many Vendors.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Vendors and only return the `id`
     * const vendorWithIdOnly = await prisma.vendor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VendorUpdateManyAndReturnArgs>(args: SelectSubset<T, VendorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Vendor.
     * @param {VendorUpsertArgs} args - Arguments to update or create a Vendor.
     * @example
     * // Update or create a Vendor
     * const vendor = await prisma.vendor.upsert({
     *   create: {
     *     // ... data to create a Vendor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendor we want to update
     *   }
     * })
     */
    upsert<T extends VendorUpsertArgs>(args: SelectSubset<T, VendorUpsertArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorCountArgs} args - Arguments to filter Vendors to count.
     * @example
     * // Count the number of Vendors
     * const count = await prisma.vendor.count({
     *   where: {
     *     // ... the filter for the Vendors we want to count
     *   }
     * })
    **/
    count<T extends VendorCountArgs>(
      args?: Subset<T, VendorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendorAggregateArgs>(args: Subset<T, VendorAggregateArgs>): Prisma.PrismaPromise<GetVendorAggregateType<T>>

    /**
     * Group by Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendorGroupByArgs['orderBy'] }
        : { orderBy?: VendorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vendor model
   */
  readonly fields: VendorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vendor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VendorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    quotes<T extends Vendor$quotesArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$quotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orders<T extends Vendor$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vendor model
   */
  interface VendorFieldRefs {
    readonly id: FieldRef<"Vendor", 'String'>
    readonly name: FieldRef<"Vendor", 'String'>
    readonly email: FieldRef<"Vendor", 'String'>
    readonly phone: FieldRef<"Vendor", 'String'>
    readonly address: FieldRef<"Vendor", 'String'>
    readonly categories: FieldRef<"Vendor", 'String[]'>
    readonly rating: FieldRef<"Vendor", 'Float'>
    readonly verified: FieldRef<"Vendor", 'Boolean'>
    readonly minOrderValue: FieldRef<"Vendor", 'Float'>
    readonly paymentTerms: FieldRef<"Vendor", 'String'>
    readonly createdAt: FieldRef<"Vendor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Vendor findUnique
   */
  export type VendorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findUniqueOrThrow
   */
  export type VendorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findFirst
   */
  export type VendorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findFirstOrThrow
   */
  export type VendorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findMany
   */
  export type VendorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendors to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor create
   */
  export type VendorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to create a Vendor.
     */
    data: XOR<VendorCreateInput, VendorUncheckedCreateInput>
  }

  /**
   * Vendor createMany
   */
  export type VendorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vendors.
     */
    data: VendorCreateManyInput | VendorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vendor createManyAndReturn
   */
  export type VendorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * The data used to create many Vendors.
     */
    data: VendorCreateManyInput | VendorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vendor update
   */
  export type VendorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to update a Vendor.
     */
    data: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
    /**
     * Choose, which Vendor to update.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor updateMany
   */
  export type VendorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vendors.
     */
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to update.
     */
    limit?: number
  }

  /**
   * Vendor updateManyAndReturn
   */
  export type VendorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * The data used to update Vendors.
     */
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to update.
     */
    limit?: number
  }

  /**
   * Vendor upsert
   */
  export type VendorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The filter to search for the Vendor to update in case it exists.
     */
    where: VendorWhereUniqueInput
    /**
     * In case the Vendor found by the `where` argument doesn't exist, create a new Vendor with this data.
     */
    create: XOR<VendorCreateInput, VendorUncheckedCreateInput>
    /**
     * In case the Vendor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
  }

  /**
   * Vendor delete
   */
  export type VendorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter which Vendor to delete.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor deleteMany
   */
  export type VendorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendors to delete
     */
    where?: VendorWhereInput
    /**
     * Limit how many Vendors to delete.
     */
    limit?: number
  }

  /**
   * Vendor.quotes
   */
  export type Vendor$quotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    where?: QuoteWhereInput
    orderBy?: QuoteOrderByWithRelationInput | QuoteOrderByWithRelationInput[]
    cursor?: QuoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuoteScalarFieldEnum | QuoteScalarFieldEnum[]
  }

  /**
   * Vendor.orders
   */
  export type Vendor$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Vendor without action
   */
  export type VendorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vendor
     */
    omit?: VendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
  }


  /**
   * Model Buyer
   */

  export type AggregateBuyer = {
    _count: BuyerCountAggregateOutputType | null
    _min: BuyerMinAggregateOutputType | null
    _max: BuyerMaxAggregateOutputType | null
  }

  export type BuyerMinAggregateOutputType = {
    id: string | null
    companyName: string | null
    email: string | null
    phone: string | null
    address: string | null
    industry: string | null
    creditRating: string | null
    createdAt: Date | null
  }

  export type BuyerMaxAggregateOutputType = {
    id: string | null
    companyName: string | null
    email: string | null
    phone: string | null
    address: string | null
    industry: string | null
    creditRating: string | null
    createdAt: Date | null
  }

  export type BuyerCountAggregateOutputType = {
    id: number
    companyName: number
    email: number
    phone: number
    address: number
    industry: number
    creditRating: number
    paymentHistory: number
    createdAt: number
    _all: number
  }


  export type BuyerMinAggregateInputType = {
    id?: true
    companyName?: true
    email?: true
    phone?: true
    address?: true
    industry?: true
    creditRating?: true
    createdAt?: true
  }

  export type BuyerMaxAggregateInputType = {
    id?: true
    companyName?: true
    email?: true
    phone?: true
    address?: true
    industry?: true
    creditRating?: true
    createdAt?: true
  }

  export type BuyerCountAggregateInputType = {
    id?: true
    companyName?: true
    email?: true
    phone?: true
    address?: true
    industry?: true
    creditRating?: true
    paymentHistory?: true
    createdAt?: true
    _all?: true
  }

  export type BuyerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Buyer to aggregate.
     */
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     */
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Buyers
    **/
    _count?: true | BuyerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuyerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuyerMaxAggregateInputType
  }

  export type GetBuyerAggregateType<T extends BuyerAggregateArgs> = {
        [P in keyof T & keyof AggregateBuyer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuyer[P]>
      : GetScalarType<T[P], AggregateBuyer[P]>
  }




  export type BuyerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyerWhereInput
    orderBy?: BuyerOrderByWithAggregationInput | BuyerOrderByWithAggregationInput[]
    by: BuyerScalarFieldEnum[] | BuyerScalarFieldEnum
    having?: BuyerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuyerCountAggregateInputType | true
    _min?: BuyerMinAggregateInputType
    _max?: BuyerMaxAggregateInputType
  }

  export type BuyerGroupByOutputType = {
    id: string
    companyName: string
    email: string
    phone: string | null
    address: string | null
    industry: string | null
    creditRating: string
    paymentHistory: JsonValue | null
    createdAt: Date
    _count: BuyerCountAggregateOutputType | null
    _min: BuyerMinAggregateOutputType | null
    _max: BuyerMaxAggregateOutputType | null
  }

  type GetBuyerGroupByPayload<T extends BuyerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuyerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuyerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuyerGroupByOutputType[P]>
            : GetScalarType<T[P], BuyerGroupByOutputType[P]>
        }
      >
    >


  export type BuyerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    industry?: boolean
    creditRating?: boolean
    paymentHistory?: boolean
    createdAt?: boolean
    procurementRequests?: boolean | Buyer$procurementRequestsArgs<ExtArgs>
    orders?: boolean | Buyer$ordersArgs<ExtArgs>
    _count?: boolean | BuyerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buyer"]>

  export type BuyerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    industry?: boolean
    creditRating?: boolean
    paymentHistory?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["buyer"]>

  export type BuyerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    industry?: boolean
    creditRating?: boolean
    paymentHistory?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["buyer"]>

  export type BuyerSelectScalar = {
    id?: boolean
    companyName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    industry?: boolean
    creditRating?: boolean
    paymentHistory?: boolean
    createdAt?: boolean
  }

  export type BuyerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyName" | "email" | "phone" | "address" | "industry" | "creditRating" | "paymentHistory" | "createdAt", ExtArgs["result"]["buyer"]>
  export type BuyerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    procurementRequests?: boolean | Buyer$procurementRequestsArgs<ExtArgs>
    orders?: boolean | Buyer$ordersArgs<ExtArgs>
    _count?: boolean | BuyerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BuyerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BuyerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BuyerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Buyer"
    objects: {
      procurementRequests: Prisma.$ProcurementRequestPayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyName: string
      email: string
      phone: string | null
      address: string | null
      industry: string | null
      creditRating: string
      paymentHistory: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["buyer"]>
    composites: {}
  }

  type BuyerGetPayload<S extends boolean | null | undefined | BuyerDefaultArgs> = $Result.GetResult<Prisma.$BuyerPayload, S>

  type BuyerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BuyerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BuyerCountAggregateInputType | true
    }

  export interface BuyerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Buyer'], meta: { name: 'Buyer' } }
    /**
     * Find zero or one Buyer that matches the filter.
     * @param {BuyerFindUniqueArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuyerFindUniqueArgs>(args: SelectSubset<T, BuyerFindUniqueArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Buyer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BuyerFindUniqueOrThrowArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuyerFindUniqueOrThrowArgs>(args: SelectSubset<T, BuyerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Buyer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerFindFirstArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuyerFindFirstArgs>(args?: SelectSubset<T, BuyerFindFirstArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Buyer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerFindFirstOrThrowArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuyerFindFirstOrThrowArgs>(args?: SelectSubset<T, BuyerFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Buyers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Buyers
     * const buyers = await prisma.buyer.findMany()
     * 
     * // Get first 10 Buyers
     * const buyers = await prisma.buyer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buyerWithIdOnly = await prisma.buyer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BuyerFindManyArgs>(args?: SelectSubset<T, BuyerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Buyer.
     * @param {BuyerCreateArgs} args - Arguments to create a Buyer.
     * @example
     * // Create one Buyer
     * const Buyer = await prisma.buyer.create({
     *   data: {
     *     // ... data to create a Buyer
     *   }
     * })
     * 
     */
    create<T extends BuyerCreateArgs>(args: SelectSubset<T, BuyerCreateArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Buyers.
     * @param {BuyerCreateManyArgs} args - Arguments to create many Buyers.
     * @example
     * // Create many Buyers
     * const buyer = await prisma.buyer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuyerCreateManyArgs>(args?: SelectSubset<T, BuyerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Buyers and returns the data saved in the database.
     * @param {BuyerCreateManyAndReturnArgs} args - Arguments to create many Buyers.
     * @example
     * // Create many Buyers
     * const buyer = await prisma.buyer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Buyers and only return the `id`
     * const buyerWithIdOnly = await prisma.buyer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BuyerCreateManyAndReturnArgs>(args?: SelectSubset<T, BuyerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Buyer.
     * @param {BuyerDeleteArgs} args - Arguments to delete one Buyer.
     * @example
     * // Delete one Buyer
     * const Buyer = await prisma.buyer.delete({
     *   where: {
     *     // ... filter to delete one Buyer
     *   }
     * })
     * 
     */
    delete<T extends BuyerDeleteArgs>(args: SelectSubset<T, BuyerDeleteArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Buyer.
     * @param {BuyerUpdateArgs} args - Arguments to update one Buyer.
     * @example
     * // Update one Buyer
     * const buyer = await prisma.buyer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuyerUpdateArgs>(args: SelectSubset<T, BuyerUpdateArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Buyers.
     * @param {BuyerDeleteManyArgs} args - Arguments to filter Buyers to delete.
     * @example
     * // Delete a few Buyers
     * const { count } = await prisma.buyer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuyerDeleteManyArgs>(args?: SelectSubset<T, BuyerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buyers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Buyers
     * const buyer = await prisma.buyer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuyerUpdateManyArgs>(args: SelectSubset<T, BuyerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buyers and returns the data updated in the database.
     * @param {BuyerUpdateManyAndReturnArgs} args - Arguments to update many Buyers.
     * @example
     * // Update many Buyers
     * const buyer = await prisma.buyer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Buyers and only return the `id`
     * const buyerWithIdOnly = await prisma.buyer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BuyerUpdateManyAndReturnArgs>(args: SelectSubset<T, BuyerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Buyer.
     * @param {BuyerUpsertArgs} args - Arguments to update or create a Buyer.
     * @example
     * // Update or create a Buyer
     * const buyer = await prisma.buyer.upsert({
     *   create: {
     *     // ... data to create a Buyer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Buyer we want to update
     *   }
     * })
     */
    upsert<T extends BuyerUpsertArgs>(args: SelectSubset<T, BuyerUpsertArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Buyers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerCountArgs} args - Arguments to filter Buyers to count.
     * @example
     * // Count the number of Buyers
     * const count = await prisma.buyer.count({
     *   where: {
     *     // ... the filter for the Buyers we want to count
     *   }
     * })
    **/
    count<T extends BuyerCountArgs>(
      args?: Subset<T, BuyerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuyerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Buyer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuyerAggregateArgs>(args: Subset<T, BuyerAggregateArgs>): Prisma.PrismaPromise<GetBuyerAggregateType<T>>

    /**
     * Group by Buyer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuyerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuyerGroupByArgs['orderBy'] }
        : { orderBy?: BuyerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuyerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuyerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Buyer model
   */
  readonly fields: BuyerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Buyer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuyerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    procurementRequests<T extends Buyer$procurementRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Buyer$procurementRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcurementRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orders<T extends Buyer$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Buyer$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Buyer model
   */
  interface BuyerFieldRefs {
    readonly id: FieldRef<"Buyer", 'String'>
    readonly companyName: FieldRef<"Buyer", 'String'>
    readonly email: FieldRef<"Buyer", 'String'>
    readonly phone: FieldRef<"Buyer", 'String'>
    readonly address: FieldRef<"Buyer", 'String'>
    readonly industry: FieldRef<"Buyer", 'String'>
    readonly creditRating: FieldRef<"Buyer", 'String'>
    readonly paymentHistory: FieldRef<"Buyer", 'Json'>
    readonly createdAt: FieldRef<"Buyer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Buyer findUnique
   */
  export type BuyerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyer to fetch.
     */
    where: BuyerWhereUniqueInput
  }

  /**
   * Buyer findUniqueOrThrow
   */
  export type BuyerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyer to fetch.
     */
    where: BuyerWhereUniqueInput
  }

  /**
   * Buyer findFirst
   */
  export type BuyerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyer to fetch.
     */
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     */
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buyers.
     */
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buyers.
     */
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }

  /**
   * Buyer findFirstOrThrow
   */
  export type BuyerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyer to fetch.
     */
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     */
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buyers.
     */
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buyers.
     */
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }

  /**
   * Buyer findMany
   */
  export type BuyerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyers to fetch.
     */
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     */
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Buyers.
     */
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     */
    skip?: number
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }

  /**
   * Buyer create
   */
  export type BuyerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * The data needed to create a Buyer.
     */
    data: XOR<BuyerCreateInput, BuyerUncheckedCreateInput>
  }

  /**
   * Buyer createMany
   */
  export type BuyerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Buyers.
     */
    data: BuyerCreateManyInput | BuyerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Buyer createManyAndReturn
   */
  export type BuyerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * The data used to create many Buyers.
     */
    data: BuyerCreateManyInput | BuyerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Buyer update
   */
  export type BuyerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * The data needed to update a Buyer.
     */
    data: XOR<BuyerUpdateInput, BuyerUncheckedUpdateInput>
    /**
     * Choose, which Buyer to update.
     */
    where: BuyerWhereUniqueInput
  }

  /**
   * Buyer updateMany
   */
  export type BuyerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Buyers.
     */
    data: XOR<BuyerUpdateManyMutationInput, BuyerUncheckedUpdateManyInput>
    /**
     * Filter which Buyers to update
     */
    where?: BuyerWhereInput
    /**
     * Limit how many Buyers to update.
     */
    limit?: number
  }

  /**
   * Buyer updateManyAndReturn
   */
  export type BuyerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * The data used to update Buyers.
     */
    data: XOR<BuyerUpdateManyMutationInput, BuyerUncheckedUpdateManyInput>
    /**
     * Filter which Buyers to update
     */
    where?: BuyerWhereInput
    /**
     * Limit how many Buyers to update.
     */
    limit?: number
  }

  /**
   * Buyer upsert
   */
  export type BuyerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * The filter to search for the Buyer to update in case it exists.
     */
    where: BuyerWhereUniqueInput
    /**
     * In case the Buyer found by the `where` argument doesn't exist, create a new Buyer with this data.
     */
    create: XOR<BuyerCreateInput, BuyerUncheckedCreateInput>
    /**
     * In case the Buyer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuyerUpdateInput, BuyerUncheckedUpdateInput>
  }

  /**
   * Buyer delete
   */
  export type BuyerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter which Buyer to delete.
     */
    where: BuyerWhereUniqueInput
  }

  /**
   * Buyer deleteMany
   */
  export type BuyerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Buyers to delete
     */
    where?: BuyerWhereInput
    /**
     * Limit how many Buyers to delete.
     */
    limit?: number
  }

  /**
   * Buyer.procurementRequests
   */
  export type Buyer$procurementRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcurementRequest
     */
    select?: ProcurementRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcurementRequest
     */
    omit?: ProcurementRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementRequestInclude<ExtArgs> | null
    where?: ProcurementRequestWhereInput
    orderBy?: ProcurementRequestOrderByWithRelationInput | ProcurementRequestOrderByWithRelationInput[]
    cursor?: ProcurementRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcurementRequestScalarFieldEnum | ProcurementRequestScalarFieldEnum[]
  }

  /**
   * Buyer.orders
   */
  export type Buyer$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Buyer without action
   */
  export type BuyerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Buyer
     */
    omit?: BuyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
  }


  /**
   * Model ProcurementRequest
   */

  export type AggregateProcurementRequest = {
    _count: ProcurementRequestCountAggregateOutputType | null
    _avg: ProcurementRequestAvgAggregateOutputType | null
    _sum: ProcurementRequestSumAggregateOutputType | null
    _min: ProcurementRequestMinAggregateOutputType | null
    _max: ProcurementRequestMaxAggregateOutputType | null
  }

  export type ProcurementRequestAvgAggregateOutputType = {
    quantity: number | null
    maxBudget: number | null
  }

  export type ProcurementRequestSumAggregateOutputType = {
    quantity: number | null
    maxBudget: number | null
  }

  export type ProcurementRequestMinAggregateOutputType = {
    id: string | null
    buyerId: string | null
    productName: string | null
    category: string | null
    quantity: number | null
    unit: string | null
    deliveryDate: Date | null
    deliveryAddress: string | null
    maxBudget: number | null
    status: string | null
    urgency: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProcurementRequestMaxAggregateOutputType = {
    id: string | null
    buyerId: string | null
    productName: string | null
    category: string | null
    quantity: number | null
    unit: string | null
    deliveryDate: Date | null
    deliveryAddress: string | null
    maxBudget: number | null
    status: string | null
    urgency: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProcurementRequestCountAggregateOutputType = {
    id: number
    buyerId: number
    productName: number
    category: number
    quantity: number
    unit: number
    specifications: number
    deliveryDate: number
    deliveryAddress: number
    maxBudget: number
    status: number
    urgency: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProcurementRequestAvgAggregateInputType = {
    quantity?: true
    maxBudget?: true
  }

  export type ProcurementRequestSumAggregateInputType = {
    quantity?: true
    maxBudget?: true
  }

  export type ProcurementRequestMinAggregateInputType = {
    id?: true
    buyerId?: true
    productName?: true
    category?: true
    quantity?: true
    unit?: true
    deliveryDate?: true
    deliveryAddress?: true
    maxBudget?: true
    status?: true
    urgency?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProcurementRequestMaxAggregateInputType = {
    id?: true
    buyerId?: true
    productName?: true
    category?: true
    quantity?: true
    unit?: true
    deliveryDate?: true
    deliveryAddress?: true
    maxBudget?: true
    status?: true
    urgency?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProcurementRequestCountAggregateInputType = {
    id?: true
    buyerId?: true
    productName?: true
    category?: true
    quantity?: true
    unit?: true
    specifications?: true
    deliveryDate?: true
    deliveryAddress?: true
    maxBudget?: true
    status?: true
    urgency?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProcurementRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProcurementRequest to aggregate.
     */
    where?: ProcurementRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcurementRequests to fetch.
     */
    orderBy?: ProcurementRequestOrderByWithRelationInput | ProcurementRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProcurementRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcurementRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcurementRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProcurementRequests
    **/
    _count?: true | ProcurementRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProcurementRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProcurementRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProcurementRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProcurementRequestMaxAggregateInputType
  }

  export type GetProcurementRequestAggregateType<T extends ProcurementRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateProcurementRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProcurementRequest[P]>
      : GetScalarType<T[P], AggregateProcurementRequest[P]>
  }




  export type ProcurementRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcurementRequestWhereInput
    orderBy?: ProcurementRequestOrderByWithAggregationInput | ProcurementRequestOrderByWithAggregationInput[]
    by: ProcurementRequestScalarFieldEnum[] | ProcurementRequestScalarFieldEnum
    having?: ProcurementRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProcurementRequestCountAggregateInputType | true
    _avg?: ProcurementRequestAvgAggregateInputType
    _sum?: ProcurementRequestSumAggregateInputType
    _min?: ProcurementRequestMinAggregateInputType
    _max?: ProcurementRequestMaxAggregateInputType
  }

  export type ProcurementRequestGroupByOutputType = {
    id: string
    buyerId: string
    productName: string
    category: string
    quantity: number
    unit: string
    specifications: JsonValue | null
    deliveryDate: Date
    deliveryAddress: string | null
    maxBudget: number | null
    status: string
    urgency: string
    createdAt: Date
    updatedAt: Date
    _count: ProcurementRequestCountAggregateOutputType | null
    _avg: ProcurementRequestAvgAggregateOutputType | null
    _sum: ProcurementRequestSumAggregateOutputType | null
    _min: ProcurementRequestMinAggregateOutputType | null
    _max: ProcurementRequestMaxAggregateOutputType | null
  }

  type GetProcurementRequestGroupByPayload<T extends ProcurementRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProcurementRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProcurementRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProcurementRequestGroupByOutputType[P]>
            : GetScalarType<T[P], ProcurementRequestGroupByOutputType[P]>
        }
      >
    >


  export type ProcurementRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buyerId?: boolean
    productName?: boolean
    category?: boolean
    quantity?: boolean
    unit?: boolean
    specifications?: boolean
    deliveryDate?: boolean
    deliveryAddress?: boolean
    maxBudget?: boolean
    status?: boolean
    urgency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
    quotes?: boolean | ProcurementRequest$quotesArgs<ExtArgs>
    orders?: boolean | ProcurementRequest$ordersArgs<ExtArgs>
    _count?: boolean | ProcurementRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["procurementRequest"]>

  export type ProcurementRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buyerId?: boolean
    productName?: boolean
    category?: boolean
    quantity?: boolean
    unit?: boolean
    specifications?: boolean
    deliveryDate?: boolean
    deliveryAddress?: boolean
    maxBudget?: boolean
    status?: boolean
    urgency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["procurementRequest"]>

  export type ProcurementRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buyerId?: boolean
    productName?: boolean
    category?: boolean
    quantity?: boolean
    unit?: boolean
    specifications?: boolean
    deliveryDate?: boolean
    deliveryAddress?: boolean
    maxBudget?: boolean
    status?: boolean
    urgency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["procurementRequest"]>

  export type ProcurementRequestSelectScalar = {
    id?: boolean
    buyerId?: boolean
    productName?: boolean
    category?: boolean
    quantity?: boolean
    unit?: boolean
    specifications?: boolean
    deliveryDate?: boolean
    deliveryAddress?: boolean
    maxBudget?: boolean
    status?: boolean
    urgency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProcurementRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "buyerId" | "productName" | "category" | "quantity" | "unit" | "specifications" | "deliveryDate" | "deliveryAddress" | "maxBudget" | "status" | "urgency" | "createdAt" | "updatedAt", ExtArgs["result"]["procurementRequest"]>
  export type ProcurementRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
    quotes?: boolean | ProcurementRequest$quotesArgs<ExtArgs>
    orders?: boolean | ProcurementRequest$ordersArgs<ExtArgs>
    _count?: boolean | ProcurementRequestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProcurementRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
  }
  export type ProcurementRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
  }

  export type $ProcurementRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProcurementRequest"
    objects: {
      buyer: Prisma.$BuyerPayload<ExtArgs>
      quotes: Prisma.$QuotePayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      buyerId: string
      productName: string
      category: string
      quantity: number
      unit: string
      specifications: Prisma.JsonValue | null
      deliveryDate: Date
      deliveryAddress: string | null
      maxBudget: number | null
      status: string
      urgency: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["procurementRequest"]>
    composites: {}
  }

  type ProcurementRequestGetPayload<S extends boolean | null | undefined | ProcurementRequestDefaultArgs> = $Result.GetResult<Prisma.$ProcurementRequestPayload, S>

  type ProcurementRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProcurementRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProcurementRequestCountAggregateInputType | true
    }

  export interface ProcurementRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProcurementRequest'], meta: { name: 'ProcurementRequest' } }
    /**
     * Find zero or one ProcurementRequest that matches the filter.
     * @param {ProcurementRequestFindUniqueArgs} args - Arguments to find a ProcurementRequest
     * @example
     * // Get one ProcurementRequest
     * const procurementRequest = await prisma.procurementRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProcurementRequestFindUniqueArgs>(args: SelectSubset<T, ProcurementRequestFindUniqueArgs<ExtArgs>>): Prisma__ProcurementRequestClient<$Result.GetResult<Prisma.$ProcurementRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProcurementRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProcurementRequestFindUniqueOrThrowArgs} args - Arguments to find a ProcurementRequest
     * @example
     * // Get one ProcurementRequest
     * const procurementRequest = await prisma.procurementRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProcurementRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, ProcurementRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProcurementRequestClient<$Result.GetResult<Prisma.$ProcurementRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProcurementRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcurementRequestFindFirstArgs} args - Arguments to find a ProcurementRequest
     * @example
     * // Get one ProcurementRequest
     * const procurementRequest = await prisma.procurementRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProcurementRequestFindFirstArgs>(args?: SelectSubset<T, ProcurementRequestFindFirstArgs<ExtArgs>>): Prisma__ProcurementRequestClient<$Result.GetResult<Prisma.$ProcurementRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProcurementRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcurementRequestFindFirstOrThrowArgs} args - Arguments to find a ProcurementRequest
     * @example
     * // Get one ProcurementRequest
     * const procurementRequest = await prisma.procurementRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProcurementRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, ProcurementRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProcurementRequestClient<$Result.GetResult<Prisma.$ProcurementRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProcurementRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcurementRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProcurementRequests
     * const procurementRequests = await prisma.procurementRequest.findMany()
     * 
     * // Get first 10 ProcurementRequests
     * const procurementRequests = await prisma.procurementRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const procurementRequestWithIdOnly = await prisma.procurementRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProcurementRequestFindManyArgs>(args?: SelectSubset<T, ProcurementRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcurementRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProcurementRequest.
     * @param {ProcurementRequestCreateArgs} args - Arguments to create a ProcurementRequest.
     * @example
     * // Create one ProcurementRequest
     * const ProcurementRequest = await prisma.procurementRequest.create({
     *   data: {
     *     // ... data to create a ProcurementRequest
     *   }
     * })
     * 
     */
    create<T extends ProcurementRequestCreateArgs>(args: SelectSubset<T, ProcurementRequestCreateArgs<ExtArgs>>): Prisma__ProcurementRequestClient<$Result.GetResult<Prisma.$ProcurementRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProcurementRequests.
     * @param {ProcurementRequestCreateManyArgs} args - Arguments to create many ProcurementRequests.
     * @example
     * // Create many ProcurementRequests
     * const procurementRequest = await prisma.procurementRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProcurementRequestCreateManyArgs>(args?: SelectSubset<T, ProcurementRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProcurementRequests and returns the data saved in the database.
     * @param {ProcurementRequestCreateManyAndReturnArgs} args - Arguments to create many ProcurementRequests.
     * @example
     * // Create many ProcurementRequests
     * const procurementRequest = await prisma.procurementRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProcurementRequests and only return the `id`
     * const procurementRequestWithIdOnly = await prisma.procurementRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProcurementRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, ProcurementRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcurementRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProcurementRequest.
     * @param {ProcurementRequestDeleteArgs} args - Arguments to delete one ProcurementRequest.
     * @example
     * // Delete one ProcurementRequest
     * const ProcurementRequest = await prisma.procurementRequest.delete({
     *   where: {
     *     // ... filter to delete one ProcurementRequest
     *   }
     * })
     * 
     */
    delete<T extends ProcurementRequestDeleteArgs>(args: SelectSubset<T, ProcurementRequestDeleteArgs<ExtArgs>>): Prisma__ProcurementRequestClient<$Result.GetResult<Prisma.$ProcurementRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProcurementRequest.
     * @param {ProcurementRequestUpdateArgs} args - Arguments to update one ProcurementRequest.
     * @example
     * // Update one ProcurementRequest
     * const procurementRequest = await prisma.procurementRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProcurementRequestUpdateArgs>(args: SelectSubset<T, ProcurementRequestUpdateArgs<ExtArgs>>): Prisma__ProcurementRequestClient<$Result.GetResult<Prisma.$ProcurementRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProcurementRequests.
     * @param {ProcurementRequestDeleteManyArgs} args - Arguments to filter ProcurementRequests to delete.
     * @example
     * // Delete a few ProcurementRequests
     * const { count } = await prisma.procurementRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProcurementRequestDeleteManyArgs>(args?: SelectSubset<T, ProcurementRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProcurementRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcurementRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProcurementRequests
     * const procurementRequest = await prisma.procurementRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProcurementRequestUpdateManyArgs>(args: SelectSubset<T, ProcurementRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProcurementRequests and returns the data updated in the database.
     * @param {ProcurementRequestUpdateManyAndReturnArgs} args - Arguments to update many ProcurementRequests.
     * @example
     * // Update many ProcurementRequests
     * const procurementRequest = await prisma.procurementRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProcurementRequests and only return the `id`
     * const procurementRequestWithIdOnly = await prisma.procurementRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProcurementRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, ProcurementRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcurementRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProcurementRequest.
     * @param {ProcurementRequestUpsertArgs} args - Arguments to update or create a ProcurementRequest.
     * @example
     * // Update or create a ProcurementRequest
     * const procurementRequest = await prisma.procurementRequest.upsert({
     *   create: {
     *     // ... data to create a ProcurementRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProcurementRequest we want to update
     *   }
     * })
     */
    upsert<T extends ProcurementRequestUpsertArgs>(args: SelectSubset<T, ProcurementRequestUpsertArgs<ExtArgs>>): Prisma__ProcurementRequestClient<$Result.GetResult<Prisma.$ProcurementRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProcurementRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcurementRequestCountArgs} args - Arguments to filter ProcurementRequests to count.
     * @example
     * // Count the number of ProcurementRequests
     * const count = await prisma.procurementRequest.count({
     *   where: {
     *     // ... the filter for the ProcurementRequests we want to count
     *   }
     * })
    **/
    count<T extends ProcurementRequestCountArgs>(
      args?: Subset<T, ProcurementRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProcurementRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProcurementRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcurementRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProcurementRequestAggregateArgs>(args: Subset<T, ProcurementRequestAggregateArgs>): Prisma.PrismaPromise<GetProcurementRequestAggregateType<T>>

    /**
     * Group by ProcurementRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcurementRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProcurementRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProcurementRequestGroupByArgs['orderBy'] }
        : { orderBy?: ProcurementRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProcurementRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcurementRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProcurementRequest model
   */
  readonly fields: ProcurementRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProcurementRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProcurementRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    buyer<T extends BuyerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BuyerDefaultArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    quotes<T extends ProcurementRequest$quotesArgs<ExtArgs> = {}>(args?: Subset<T, ProcurementRequest$quotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orders<T extends ProcurementRequest$ordersArgs<ExtArgs> = {}>(args?: Subset<T, ProcurementRequest$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProcurementRequest model
   */
  interface ProcurementRequestFieldRefs {
    readonly id: FieldRef<"ProcurementRequest", 'String'>
    readonly buyerId: FieldRef<"ProcurementRequest", 'String'>
    readonly productName: FieldRef<"ProcurementRequest", 'String'>
    readonly category: FieldRef<"ProcurementRequest", 'String'>
    readonly quantity: FieldRef<"ProcurementRequest", 'Float'>
    readonly unit: FieldRef<"ProcurementRequest", 'String'>
    readonly specifications: FieldRef<"ProcurementRequest", 'Json'>
    readonly deliveryDate: FieldRef<"ProcurementRequest", 'DateTime'>
    readonly deliveryAddress: FieldRef<"ProcurementRequest", 'String'>
    readonly maxBudget: FieldRef<"ProcurementRequest", 'Float'>
    readonly status: FieldRef<"ProcurementRequest", 'String'>
    readonly urgency: FieldRef<"ProcurementRequest", 'String'>
    readonly createdAt: FieldRef<"ProcurementRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"ProcurementRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProcurementRequest findUnique
   */
  export type ProcurementRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcurementRequest
     */
    select?: ProcurementRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcurementRequest
     */
    omit?: ProcurementRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementRequestInclude<ExtArgs> | null
    /**
     * Filter, which ProcurementRequest to fetch.
     */
    where: ProcurementRequestWhereUniqueInput
  }

  /**
   * ProcurementRequest findUniqueOrThrow
   */
  export type ProcurementRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcurementRequest
     */
    select?: ProcurementRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcurementRequest
     */
    omit?: ProcurementRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementRequestInclude<ExtArgs> | null
    /**
     * Filter, which ProcurementRequest to fetch.
     */
    where: ProcurementRequestWhereUniqueInput
  }

  /**
   * ProcurementRequest findFirst
   */
  export type ProcurementRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcurementRequest
     */
    select?: ProcurementRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcurementRequest
     */
    omit?: ProcurementRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementRequestInclude<ExtArgs> | null
    /**
     * Filter, which ProcurementRequest to fetch.
     */
    where?: ProcurementRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcurementRequests to fetch.
     */
    orderBy?: ProcurementRequestOrderByWithRelationInput | ProcurementRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProcurementRequests.
     */
    cursor?: ProcurementRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcurementRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcurementRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProcurementRequests.
     */
    distinct?: ProcurementRequestScalarFieldEnum | ProcurementRequestScalarFieldEnum[]
  }

  /**
   * ProcurementRequest findFirstOrThrow
   */
  export type ProcurementRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcurementRequest
     */
    select?: ProcurementRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcurementRequest
     */
    omit?: ProcurementRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementRequestInclude<ExtArgs> | null
    /**
     * Filter, which ProcurementRequest to fetch.
     */
    where?: ProcurementRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcurementRequests to fetch.
     */
    orderBy?: ProcurementRequestOrderByWithRelationInput | ProcurementRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProcurementRequests.
     */
    cursor?: ProcurementRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcurementRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcurementRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProcurementRequests.
     */
    distinct?: ProcurementRequestScalarFieldEnum | ProcurementRequestScalarFieldEnum[]
  }

  /**
   * ProcurementRequest findMany
   */
  export type ProcurementRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcurementRequest
     */
    select?: ProcurementRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcurementRequest
     */
    omit?: ProcurementRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementRequestInclude<ExtArgs> | null
    /**
     * Filter, which ProcurementRequests to fetch.
     */
    where?: ProcurementRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcurementRequests to fetch.
     */
    orderBy?: ProcurementRequestOrderByWithRelationInput | ProcurementRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProcurementRequests.
     */
    cursor?: ProcurementRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcurementRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcurementRequests.
     */
    skip?: number
    distinct?: ProcurementRequestScalarFieldEnum | ProcurementRequestScalarFieldEnum[]
  }

  /**
   * ProcurementRequest create
   */
  export type ProcurementRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcurementRequest
     */
    select?: ProcurementRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcurementRequest
     */
    omit?: ProcurementRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a ProcurementRequest.
     */
    data: XOR<ProcurementRequestCreateInput, ProcurementRequestUncheckedCreateInput>
  }

  /**
   * ProcurementRequest createMany
   */
  export type ProcurementRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProcurementRequests.
     */
    data: ProcurementRequestCreateManyInput | ProcurementRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProcurementRequest createManyAndReturn
   */
  export type ProcurementRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcurementRequest
     */
    select?: ProcurementRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProcurementRequest
     */
    omit?: ProcurementRequestOmit<ExtArgs> | null
    /**
     * The data used to create many ProcurementRequests.
     */
    data: ProcurementRequestCreateManyInput | ProcurementRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProcurementRequest update
   */
  export type ProcurementRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcurementRequest
     */
    select?: ProcurementRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcurementRequest
     */
    omit?: ProcurementRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a ProcurementRequest.
     */
    data: XOR<ProcurementRequestUpdateInput, ProcurementRequestUncheckedUpdateInput>
    /**
     * Choose, which ProcurementRequest to update.
     */
    where: ProcurementRequestWhereUniqueInput
  }

  /**
   * ProcurementRequest updateMany
   */
  export type ProcurementRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProcurementRequests.
     */
    data: XOR<ProcurementRequestUpdateManyMutationInput, ProcurementRequestUncheckedUpdateManyInput>
    /**
     * Filter which ProcurementRequests to update
     */
    where?: ProcurementRequestWhereInput
    /**
     * Limit how many ProcurementRequests to update.
     */
    limit?: number
  }

  /**
   * ProcurementRequest updateManyAndReturn
   */
  export type ProcurementRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcurementRequest
     */
    select?: ProcurementRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProcurementRequest
     */
    omit?: ProcurementRequestOmit<ExtArgs> | null
    /**
     * The data used to update ProcurementRequests.
     */
    data: XOR<ProcurementRequestUpdateManyMutationInput, ProcurementRequestUncheckedUpdateManyInput>
    /**
     * Filter which ProcurementRequests to update
     */
    where?: ProcurementRequestWhereInput
    /**
     * Limit how many ProcurementRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProcurementRequest upsert
   */
  export type ProcurementRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcurementRequest
     */
    select?: ProcurementRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcurementRequest
     */
    omit?: ProcurementRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the ProcurementRequest to update in case it exists.
     */
    where: ProcurementRequestWhereUniqueInput
    /**
     * In case the ProcurementRequest found by the `where` argument doesn't exist, create a new ProcurementRequest with this data.
     */
    create: XOR<ProcurementRequestCreateInput, ProcurementRequestUncheckedCreateInput>
    /**
     * In case the ProcurementRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProcurementRequestUpdateInput, ProcurementRequestUncheckedUpdateInput>
  }

  /**
   * ProcurementRequest delete
   */
  export type ProcurementRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcurementRequest
     */
    select?: ProcurementRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcurementRequest
     */
    omit?: ProcurementRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementRequestInclude<ExtArgs> | null
    /**
     * Filter which ProcurementRequest to delete.
     */
    where: ProcurementRequestWhereUniqueInput
  }

  /**
   * ProcurementRequest deleteMany
   */
  export type ProcurementRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProcurementRequests to delete
     */
    where?: ProcurementRequestWhereInput
    /**
     * Limit how many ProcurementRequests to delete.
     */
    limit?: number
  }

  /**
   * ProcurementRequest.quotes
   */
  export type ProcurementRequest$quotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    where?: QuoteWhereInput
    orderBy?: QuoteOrderByWithRelationInput | QuoteOrderByWithRelationInput[]
    cursor?: QuoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuoteScalarFieldEnum | QuoteScalarFieldEnum[]
  }

  /**
   * ProcurementRequest.orders
   */
  export type ProcurementRequest$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * ProcurementRequest without action
   */
  export type ProcurementRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcurementRequest
     */
    select?: ProcurementRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProcurementRequest
     */
    omit?: ProcurementRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcurementRequestInclude<ExtArgs> | null
  }


  /**
   * Model Quote
   */

  export type AggregateQuote = {
    _count: QuoteCountAggregateOutputType | null
    _avg: QuoteAvgAggregateOutputType | null
    _sum: QuoteSumAggregateOutputType | null
    _min: QuoteMinAggregateOutputType | null
    _max: QuoteMaxAggregateOutputType | null
  }

  export type QuoteAvgAggregateOutputType = {
    unitPrice: number | null
    totalPrice: number | null
  }

  export type QuoteSumAggregateOutputType = {
    unitPrice: number | null
    totalPrice: number | null
  }

  export type QuoteMinAggregateOutputType = {
    id: string | null
    requestId: string | null
    vendorId: string | null
    unitPrice: number | null
    totalPrice: number | null
    deliveryDate: Date | null
    paymentTerms: string | null
    notes: string | null
    status: string | null
    validUntil: Date | null
    createdAt: Date | null
  }

  export type QuoteMaxAggregateOutputType = {
    id: string | null
    requestId: string | null
    vendorId: string | null
    unitPrice: number | null
    totalPrice: number | null
    deliveryDate: Date | null
    paymentTerms: string | null
    notes: string | null
    status: string | null
    validUntil: Date | null
    createdAt: Date | null
  }

  export type QuoteCountAggregateOutputType = {
    id: number
    requestId: number
    vendorId: number
    unitPrice: number
    totalPrice: number
    deliveryDate: number
    paymentTerms: number
    notes: number
    status: number
    validUntil: number
    createdAt: number
    _all: number
  }


  export type QuoteAvgAggregateInputType = {
    unitPrice?: true
    totalPrice?: true
  }

  export type QuoteSumAggregateInputType = {
    unitPrice?: true
    totalPrice?: true
  }

  export type QuoteMinAggregateInputType = {
    id?: true
    requestId?: true
    vendorId?: true
    unitPrice?: true
    totalPrice?: true
    deliveryDate?: true
    paymentTerms?: true
    notes?: true
    status?: true
    validUntil?: true
    createdAt?: true
  }

  export type QuoteMaxAggregateInputType = {
    id?: true
    requestId?: true
    vendorId?: true
    unitPrice?: true
    totalPrice?: true
    deliveryDate?: true
    paymentTerms?: true
    notes?: true
    status?: true
    validUntil?: true
    createdAt?: true
  }

  export type QuoteCountAggregateInputType = {
    id?: true
    requestId?: true
    vendorId?: true
    unitPrice?: true
    totalPrice?: true
    deliveryDate?: true
    paymentTerms?: true
    notes?: true
    status?: true
    validUntil?: true
    createdAt?: true
    _all?: true
  }

  export type QuoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quote to aggregate.
     */
    where?: QuoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotes to fetch.
     */
    orderBy?: QuoteOrderByWithRelationInput | QuoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Quotes
    **/
    _count?: true | QuoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuoteMaxAggregateInputType
  }

  export type GetQuoteAggregateType<T extends QuoteAggregateArgs> = {
        [P in keyof T & keyof AggregateQuote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuote[P]>
      : GetScalarType<T[P], AggregateQuote[P]>
  }




  export type QuoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuoteWhereInput
    orderBy?: QuoteOrderByWithAggregationInput | QuoteOrderByWithAggregationInput[]
    by: QuoteScalarFieldEnum[] | QuoteScalarFieldEnum
    having?: QuoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuoteCountAggregateInputType | true
    _avg?: QuoteAvgAggregateInputType
    _sum?: QuoteSumAggregateInputType
    _min?: QuoteMinAggregateInputType
    _max?: QuoteMaxAggregateInputType
  }

  export type QuoteGroupByOutputType = {
    id: string
    requestId: string
    vendorId: string
    unitPrice: number
    totalPrice: number
    deliveryDate: Date
    paymentTerms: string
    notes: string | null
    status: string
    validUntil: Date | null
    createdAt: Date
    _count: QuoteCountAggregateOutputType | null
    _avg: QuoteAvgAggregateOutputType | null
    _sum: QuoteSumAggregateOutputType | null
    _min: QuoteMinAggregateOutputType | null
    _max: QuoteMaxAggregateOutputType | null
  }

  type GetQuoteGroupByPayload<T extends QuoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuoteGroupByOutputType[P]>
            : GetScalarType<T[P], QuoteGroupByOutputType[P]>
        }
      >
    >


  export type QuoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    vendorId?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    deliveryDate?: boolean
    paymentTerms?: boolean
    notes?: boolean
    status?: boolean
    validUntil?: boolean
    createdAt?: boolean
    request?: boolean | ProcurementRequestDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
    negotiations?: boolean | Quote$negotiationsArgs<ExtArgs>
    orders?: boolean | Quote$ordersArgs<ExtArgs>
    _count?: boolean | QuoteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quote"]>

  export type QuoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    vendorId?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    deliveryDate?: boolean
    paymentTerms?: boolean
    notes?: boolean
    status?: boolean
    validUntil?: boolean
    createdAt?: boolean
    request?: boolean | ProcurementRequestDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quote"]>

  export type QuoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    vendorId?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    deliveryDate?: boolean
    paymentTerms?: boolean
    notes?: boolean
    status?: boolean
    validUntil?: boolean
    createdAt?: boolean
    request?: boolean | ProcurementRequestDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quote"]>

  export type QuoteSelectScalar = {
    id?: boolean
    requestId?: boolean
    vendorId?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    deliveryDate?: boolean
    paymentTerms?: boolean
    notes?: boolean
    status?: boolean
    validUntil?: boolean
    createdAt?: boolean
  }

  export type QuoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "requestId" | "vendorId" | "unitPrice" | "totalPrice" | "deliveryDate" | "paymentTerms" | "notes" | "status" | "validUntil" | "createdAt", ExtArgs["result"]["quote"]>
  export type QuoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | ProcurementRequestDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
    negotiations?: boolean | Quote$negotiationsArgs<ExtArgs>
    orders?: boolean | Quote$ordersArgs<ExtArgs>
    _count?: boolean | QuoteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | ProcurementRequestDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }
  export type QuoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | ProcurementRequestDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }

  export type $QuotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Quote"
    objects: {
      request: Prisma.$ProcurementRequestPayload<ExtArgs>
      vendor: Prisma.$VendorPayload<ExtArgs>
      negotiations: Prisma.$NegotiationMessagePayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      requestId: string
      vendorId: string
      unitPrice: number
      totalPrice: number
      deliveryDate: Date
      paymentTerms: string
      notes: string | null
      status: string
      validUntil: Date | null
      createdAt: Date
    }, ExtArgs["result"]["quote"]>
    composites: {}
  }

  type QuoteGetPayload<S extends boolean | null | undefined | QuoteDefaultArgs> = $Result.GetResult<Prisma.$QuotePayload, S>

  type QuoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuoteCountAggregateInputType | true
    }

  export interface QuoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Quote'], meta: { name: 'Quote' } }
    /**
     * Find zero or one Quote that matches the filter.
     * @param {QuoteFindUniqueArgs} args - Arguments to find a Quote
     * @example
     * // Get one Quote
     * const quote = await prisma.quote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuoteFindUniqueArgs>(args: SelectSubset<T, QuoteFindUniqueArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Quote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuoteFindUniqueOrThrowArgs} args - Arguments to find a Quote
     * @example
     * // Get one Quote
     * const quote = await prisma.quote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuoteFindUniqueOrThrowArgs>(args: SelectSubset<T, QuoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Quote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteFindFirstArgs} args - Arguments to find a Quote
     * @example
     * // Get one Quote
     * const quote = await prisma.quote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuoteFindFirstArgs>(args?: SelectSubset<T, QuoteFindFirstArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Quote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteFindFirstOrThrowArgs} args - Arguments to find a Quote
     * @example
     * // Get one Quote
     * const quote = await prisma.quote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuoteFindFirstOrThrowArgs>(args?: SelectSubset<T, QuoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Quotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quotes
     * const quotes = await prisma.quote.findMany()
     * 
     * // Get first 10 Quotes
     * const quotes = await prisma.quote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quoteWithIdOnly = await prisma.quote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuoteFindManyArgs>(args?: SelectSubset<T, QuoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Quote.
     * @param {QuoteCreateArgs} args - Arguments to create a Quote.
     * @example
     * // Create one Quote
     * const Quote = await prisma.quote.create({
     *   data: {
     *     // ... data to create a Quote
     *   }
     * })
     * 
     */
    create<T extends QuoteCreateArgs>(args: SelectSubset<T, QuoteCreateArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Quotes.
     * @param {QuoteCreateManyArgs} args - Arguments to create many Quotes.
     * @example
     * // Create many Quotes
     * const quote = await prisma.quote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuoteCreateManyArgs>(args?: SelectSubset<T, QuoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Quotes and returns the data saved in the database.
     * @param {QuoteCreateManyAndReturnArgs} args - Arguments to create many Quotes.
     * @example
     * // Create many Quotes
     * const quote = await prisma.quote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Quotes and only return the `id`
     * const quoteWithIdOnly = await prisma.quote.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuoteCreateManyAndReturnArgs>(args?: SelectSubset<T, QuoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Quote.
     * @param {QuoteDeleteArgs} args - Arguments to delete one Quote.
     * @example
     * // Delete one Quote
     * const Quote = await prisma.quote.delete({
     *   where: {
     *     // ... filter to delete one Quote
     *   }
     * })
     * 
     */
    delete<T extends QuoteDeleteArgs>(args: SelectSubset<T, QuoteDeleteArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Quote.
     * @param {QuoteUpdateArgs} args - Arguments to update one Quote.
     * @example
     * // Update one Quote
     * const quote = await prisma.quote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuoteUpdateArgs>(args: SelectSubset<T, QuoteUpdateArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Quotes.
     * @param {QuoteDeleteManyArgs} args - Arguments to filter Quotes to delete.
     * @example
     * // Delete a few Quotes
     * const { count } = await prisma.quote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuoteDeleteManyArgs>(args?: SelectSubset<T, QuoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quotes
     * const quote = await prisma.quote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuoteUpdateManyArgs>(args: SelectSubset<T, QuoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quotes and returns the data updated in the database.
     * @param {QuoteUpdateManyAndReturnArgs} args - Arguments to update many Quotes.
     * @example
     * // Update many Quotes
     * const quote = await prisma.quote.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Quotes and only return the `id`
     * const quoteWithIdOnly = await prisma.quote.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuoteUpdateManyAndReturnArgs>(args: SelectSubset<T, QuoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Quote.
     * @param {QuoteUpsertArgs} args - Arguments to update or create a Quote.
     * @example
     * // Update or create a Quote
     * const quote = await prisma.quote.upsert({
     *   create: {
     *     // ... data to create a Quote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quote we want to update
     *   }
     * })
     */
    upsert<T extends QuoteUpsertArgs>(args: SelectSubset<T, QuoteUpsertArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Quotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteCountArgs} args - Arguments to filter Quotes to count.
     * @example
     * // Count the number of Quotes
     * const count = await prisma.quote.count({
     *   where: {
     *     // ... the filter for the Quotes we want to count
     *   }
     * })
    **/
    count<T extends QuoteCountArgs>(
      args?: Subset<T, QuoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuoteAggregateArgs>(args: Subset<T, QuoteAggregateArgs>): Prisma.PrismaPromise<GetQuoteAggregateType<T>>

    /**
     * Group by Quote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuoteGroupByArgs['orderBy'] }
        : { orderBy?: QuoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Quote model
   */
  readonly fields: QuoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Quote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    request<T extends ProcurementRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProcurementRequestDefaultArgs<ExtArgs>>): Prisma__ProcurementRequestClient<$Result.GetResult<Prisma.$ProcurementRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    vendor<T extends VendorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VendorDefaultArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    negotiations<T extends Quote$negotiationsArgs<ExtArgs> = {}>(args?: Subset<T, Quote$negotiationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NegotiationMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orders<T extends Quote$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Quote$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Quote model
   */
  interface QuoteFieldRefs {
    readonly id: FieldRef<"Quote", 'String'>
    readonly requestId: FieldRef<"Quote", 'String'>
    readonly vendorId: FieldRef<"Quote", 'String'>
    readonly unitPrice: FieldRef<"Quote", 'Float'>
    readonly totalPrice: FieldRef<"Quote", 'Float'>
    readonly deliveryDate: FieldRef<"Quote", 'DateTime'>
    readonly paymentTerms: FieldRef<"Quote", 'String'>
    readonly notes: FieldRef<"Quote", 'String'>
    readonly status: FieldRef<"Quote", 'String'>
    readonly validUntil: FieldRef<"Quote", 'DateTime'>
    readonly createdAt: FieldRef<"Quote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Quote findUnique
   */
  export type QuoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * Filter, which Quote to fetch.
     */
    where: QuoteWhereUniqueInput
  }

  /**
   * Quote findUniqueOrThrow
   */
  export type QuoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * Filter, which Quote to fetch.
     */
    where: QuoteWhereUniqueInput
  }

  /**
   * Quote findFirst
   */
  export type QuoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * Filter, which Quote to fetch.
     */
    where?: QuoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotes to fetch.
     */
    orderBy?: QuoteOrderByWithRelationInput | QuoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quotes.
     */
    cursor?: QuoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quotes.
     */
    distinct?: QuoteScalarFieldEnum | QuoteScalarFieldEnum[]
  }

  /**
   * Quote findFirstOrThrow
   */
  export type QuoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * Filter, which Quote to fetch.
     */
    where?: QuoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotes to fetch.
     */
    orderBy?: QuoteOrderByWithRelationInput | QuoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quotes.
     */
    cursor?: QuoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quotes.
     */
    distinct?: QuoteScalarFieldEnum | QuoteScalarFieldEnum[]
  }

  /**
   * Quote findMany
   */
  export type QuoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * Filter, which Quotes to fetch.
     */
    where?: QuoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotes to fetch.
     */
    orderBy?: QuoteOrderByWithRelationInput | QuoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Quotes.
     */
    cursor?: QuoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotes.
     */
    skip?: number
    distinct?: QuoteScalarFieldEnum | QuoteScalarFieldEnum[]
  }

  /**
   * Quote create
   */
  export type QuoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Quote.
     */
    data: XOR<QuoteCreateInput, QuoteUncheckedCreateInput>
  }

  /**
   * Quote createMany
   */
  export type QuoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Quotes.
     */
    data: QuoteCreateManyInput | QuoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Quote createManyAndReturn
   */
  export type QuoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * The data used to create many Quotes.
     */
    data: QuoteCreateManyInput | QuoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Quote update
   */
  export type QuoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Quote.
     */
    data: XOR<QuoteUpdateInput, QuoteUncheckedUpdateInput>
    /**
     * Choose, which Quote to update.
     */
    where: QuoteWhereUniqueInput
  }

  /**
   * Quote updateMany
   */
  export type QuoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Quotes.
     */
    data: XOR<QuoteUpdateManyMutationInput, QuoteUncheckedUpdateManyInput>
    /**
     * Filter which Quotes to update
     */
    where?: QuoteWhereInput
    /**
     * Limit how many Quotes to update.
     */
    limit?: number
  }

  /**
   * Quote updateManyAndReturn
   */
  export type QuoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * The data used to update Quotes.
     */
    data: XOR<QuoteUpdateManyMutationInput, QuoteUncheckedUpdateManyInput>
    /**
     * Filter which Quotes to update
     */
    where?: QuoteWhereInput
    /**
     * Limit how many Quotes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Quote upsert
   */
  export type QuoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Quote to update in case it exists.
     */
    where: QuoteWhereUniqueInput
    /**
     * In case the Quote found by the `where` argument doesn't exist, create a new Quote with this data.
     */
    create: XOR<QuoteCreateInput, QuoteUncheckedCreateInput>
    /**
     * In case the Quote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuoteUpdateInput, QuoteUncheckedUpdateInput>
  }

  /**
   * Quote delete
   */
  export type QuoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
    /**
     * Filter which Quote to delete.
     */
    where: QuoteWhereUniqueInput
  }

  /**
   * Quote deleteMany
   */
  export type QuoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quotes to delete
     */
    where?: QuoteWhereInput
    /**
     * Limit how many Quotes to delete.
     */
    limit?: number
  }

  /**
   * Quote.negotiations
   */
  export type Quote$negotiationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NegotiationMessage
     */
    select?: NegotiationMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NegotiationMessage
     */
    omit?: NegotiationMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegotiationMessageInclude<ExtArgs> | null
    where?: NegotiationMessageWhereInput
    orderBy?: NegotiationMessageOrderByWithRelationInput | NegotiationMessageOrderByWithRelationInput[]
    cursor?: NegotiationMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NegotiationMessageScalarFieldEnum | NegotiationMessageScalarFieldEnum[]
  }

  /**
   * Quote.orders
   */
  export type Quote$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Quote without action
   */
  export type QuoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quote
     */
    select?: QuoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quote
     */
    omit?: QuoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuoteInclude<ExtArgs> | null
  }


  /**
   * Model NegotiationMessage
   */

  export type AggregateNegotiationMessage = {
    _count: NegotiationMessageCountAggregateOutputType | null
    _min: NegotiationMessageMinAggregateOutputType | null
    _max: NegotiationMessageMaxAggregateOutputType | null
  }

  export type NegotiationMessageMinAggregateOutputType = {
    id: string | null
    quoteId: string | null
    sender: string | null
    message: string | null
    timestamp: Date | null
  }

  export type NegotiationMessageMaxAggregateOutputType = {
    id: string | null
    quoteId: string | null
    sender: string | null
    message: string | null
    timestamp: Date | null
  }

  export type NegotiationMessageCountAggregateOutputType = {
    id: number
    quoteId: number
    sender: number
    message: number
    proposedChanges: number
    timestamp: number
    _all: number
  }


  export type NegotiationMessageMinAggregateInputType = {
    id?: true
    quoteId?: true
    sender?: true
    message?: true
    timestamp?: true
  }

  export type NegotiationMessageMaxAggregateInputType = {
    id?: true
    quoteId?: true
    sender?: true
    message?: true
    timestamp?: true
  }

  export type NegotiationMessageCountAggregateInputType = {
    id?: true
    quoteId?: true
    sender?: true
    message?: true
    proposedChanges?: true
    timestamp?: true
    _all?: true
  }

  export type NegotiationMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NegotiationMessage to aggregate.
     */
    where?: NegotiationMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NegotiationMessages to fetch.
     */
    orderBy?: NegotiationMessageOrderByWithRelationInput | NegotiationMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NegotiationMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NegotiationMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NegotiationMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NegotiationMessages
    **/
    _count?: true | NegotiationMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NegotiationMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NegotiationMessageMaxAggregateInputType
  }

  export type GetNegotiationMessageAggregateType<T extends NegotiationMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateNegotiationMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNegotiationMessage[P]>
      : GetScalarType<T[P], AggregateNegotiationMessage[P]>
  }




  export type NegotiationMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NegotiationMessageWhereInput
    orderBy?: NegotiationMessageOrderByWithAggregationInput | NegotiationMessageOrderByWithAggregationInput[]
    by: NegotiationMessageScalarFieldEnum[] | NegotiationMessageScalarFieldEnum
    having?: NegotiationMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NegotiationMessageCountAggregateInputType | true
    _min?: NegotiationMessageMinAggregateInputType
    _max?: NegotiationMessageMaxAggregateInputType
  }

  export type NegotiationMessageGroupByOutputType = {
    id: string
    quoteId: string
    sender: string
    message: string
    proposedChanges: JsonValue | null
    timestamp: Date
    _count: NegotiationMessageCountAggregateOutputType | null
    _min: NegotiationMessageMinAggregateOutputType | null
    _max: NegotiationMessageMaxAggregateOutputType | null
  }

  type GetNegotiationMessageGroupByPayload<T extends NegotiationMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NegotiationMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NegotiationMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NegotiationMessageGroupByOutputType[P]>
            : GetScalarType<T[P], NegotiationMessageGroupByOutputType[P]>
        }
      >
    >


  export type NegotiationMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quoteId?: boolean
    sender?: boolean
    message?: boolean
    proposedChanges?: boolean
    timestamp?: boolean
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["negotiationMessage"]>

  export type NegotiationMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quoteId?: boolean
    sender?: boolean
    message?: boolean
    proposedChanges?: boolean
    timestamp?: boolean
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["negotiationMessage"]>

  export type NegotiationMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quoteId?: boolean
    sender?: boolean
    message?: boolean
    proposedChanges?: boolean
    timestamp?: boolean
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["negotiationMessage"]>

  export type NegotiationMessageSelectScalar = {
    id?: boolean
    quoteId?: boolean
    sender?: boolean
    message?: boolean
    proposedChanges?: boolean
    timestamp?: boolean
  }

  export type NegotiationMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "quoteId" | "sender" | "message" | "proposedChanges" | "timestamp", ExtArgs["result"]["negotiationMessage"]>
  export type NegotiationMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
  }
  export type NegotiationMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
  }
  export type NegotiationMessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
  }

  export type $NegotiationMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NegotiationMessage"
    objects: {
      quote: Prisma.$QuotePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      quoteId: string
      sender: string
      message: string
      proposedChanges: Prisma.JsonValue | null
      timestamp: Date
    }, ExtArgs["result"]["negotiationMessage"]>
    composites: {}
  }

  type NegotiationMessageGetPayload<S extends boolean | null | undefined | NegotiationMessageDefaultArgs> = $Result.GetResult<Prisma.$NegotiationMessagePayload, S>

  type NegotiationMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NegotiationMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NegotiationMessageCountAggregateInputType | true
    }

  export interface NegotiationMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NegotiationMessage'], meta: { name: 'NegotiationMessage' } }
    /**
     * Find zero or one NegotiationMessage that matches the filter.
     * @param {NegotiationMessageFindUniqueArgs} args - Arguments to find a NegotiationMessage
     * @example
     * // Get one NegotiationMessage
     * const negotiationMessage = await prisma.negotiationMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NegotiationMessageFindUniqueArgs>(args: SelectSubset<T, NegotiationMessageFindUniqueArgs<ExtArgs>>): Prisma__NegotiationMessageClient<$Result.GetResult<Prisma.$NegotiationMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NegotiationMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NegotiationMessageFindUniqueOrThrowArgs} args - Arguments to find a NegotiationMessage
     * @example
     * // Get one NegotiationMessage
     * const negotiationMessage = await prisma.negotiationMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NegotiationMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, NegotiationMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NegotiationMessageClient<$Result.GetResult<Prisma.$NegotiationMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NegotiationMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NegotiationMessageFindFirstArgs} args - Arguments to find a NegotiationMessage
     * @example
     * // Get one NegotiationMessage
     * const negotiationMessage = await prisma.negotiationMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NegotiationMessageFindFirstArgs>(args?: SelectSubset<T, NegotiationMessageFindFirstArgs<ExtArgs>>): Prisma__NegotiationMessageClient<$Result.GetResult<Prisma.$NegotiationMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NegotiationMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NegotiationMessageFindFirstOrThrowArgs} args - Arguments to find a NegotiationMessage
     * @example
     * // Get one NegotiationMessage
     * const negotiationMessage = await prisma.negotiationMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NegotiationMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, NegotiationMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__NegotiationMessageClient<$Result.GetResult<Prisma.$NegotiationMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NegotiationMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NegotiationMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NegotiationMessages
     * const negotiationMessages = await prisma.negotiationMessage.findMany()
     * 
     * // Get first 10 NegotiationMessages
     * const negotiationMessages = await prisma.negotiationMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const negotiationMessageWithIdOnly = await prisma.negotiationMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NegotiationMessageFindManyArgs>(args?: SelectSubset<T, NegotiationMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NegotiationMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NegotiationMessage.
     * @param {NegotiationMessageCreateArgs} args - Arguments to create a NegotiationMessage.
     * @example
     * // Create one NegotiationMessage
     * const NegotiationMessage = await prisma.negotiationMessage.create({
     *   data: {
     *     // ... data to create a NegotiationMessage
     *   }
     * })
     * 
     */
    create<T extends NegotiationMessageCreateArgs>(args: SelectSubset<T, NegotiationMessageCreateArgs<ExtArgs>>): Prisma__NegotiationMessageClient<$Result.GetResult<Prisma.$NegotiationMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NegotiationMessages.
     * @param {NegotiationMessageCreateManyArgs} args - Arguments to create many NegotiationMessages.
     * @example
     * // Create many NegotiationMessages
     * const negotiationMessage = await prisma.negotiationMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NegotiationMessageCreateManyArgs>(args?: SelectSubset<T, NegotiationMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NegotiationMessages and returns the data saved in the database.
     * @param {NegotiationMessageCreateManyAndReturnArgs} args - Arguments to create many NegotiationMessages.
     * @example
     * // Create many NegotiationMessages
     * const negotiationMessage = await prisma.negotiationMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NegotiationMessages and only return the `id`
     * const negotiationMessageWithIdOnly = await prisma.negotiationMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NegotiationMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, NegotiationMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NegotiationMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NegotiationMessage.
     * @param {NegotiationMessageDeleteArgs} args - Arguments to delete one NegotiationMessage.
     * @example
     * // Delete one NegotiationMessage
     * const NegotiationMessage = await prisma.negotiationMessage.delete({
     *   where: {
     *     // ... filter to delete one NegotiationMessage
     *   }
     * })
     * 
     */
    delete<T extends NegotiationMessageDeleteArgs>(args: SelectSubset<T, NegotiationMessageDeleteArgs<ExtArgs>>): Prisma__NegotiationMessageClient<$Result.GetResult<Prisma.$NegotiationMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NegotiationMessage.
     * @param {NegotiationMessageUpdateArgs} args - Arguments to update one NegotiationMessage.
     * @example
     * // Update one NegotiationMessage
     * const negotiationMessage = await prisma.negotiationMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NegotiationMessageUpdateArgs>(args: SelectSubset<T, NegotiationMessageUpdateArgs<ExtArgs>>): Prisma__NegotiationMessageClient<$Result.GetResult<Prisma.$NegotiationMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NegotiationMessages.
     * @param {NegotiationMessageDeleteManyArgs} args - Arguments to filter NegotiationMessages to delete.
     * @example
     * // Delete a few NegotiationMessages
     * const { count } = await prisma.negotiationMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NegotiationMessageDeleteManyArgs>(args?: SelectSubset<T, NegotiationMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NegotiationMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NegotiationMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NegotiationMessages
     * const negotiationMessage = await prisma.negotiationMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NegotiationMessageUpdateManyArgs>(args: SelectSubset<T, NegotiationMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NegotiationMessages and returns the data updated in the database.
     * @param {NegotiationMessageUpdateManyAndReturnArgs} args - Arguments to update many NegotiationMessages.
     * @example
     * // Update many NegotiationMessages
     * const negotiationMessage = await prisma.negotiationMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NegotiationMessages and only return the `id`
     * const negotiationMessageWithIdOnly = await prisma.negotiationMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NegotiationMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, NegotiationMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NegotiationMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NegotiationMessage.
     * @param {NegotiationMessageUpsertArgs} args - Arguments to update or create a NegotiationMessage.
     * @example
     * // Update or create a NegotiationMessage
     * const negotiationMessage = await prisma.negotiationMessage.upsert({
     *   create: {
     *     // ... data to create a NegotiationMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NegotiationMessage we want to update
     *   }
     * })
     */
    upsert<T extends NegotiationMessageUpsertArgs>(args: SelectSubset<T, NegotiationMessageUpsertArgs<ExtArgs>>): Prisma__NegotiationMessageClient<$Result.GetResult<Prisma.$NegotiationMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NegotiationMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NegotiationMessageCountArgs} args - Arguments to filter NegotiationMessages to count.
     * @example
     * // Count the number of NegotiationMessages
     * const count = await prisma.negotiationMessage.count({
     *   where: {
     *     // ... the filter for the NegotiationMessages we want to count
     *   }
     * })
    **/
    count<T extends NegotiationMessageCountArgs>(
      args?: Subset<T, NegotiationMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NegotiationMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NegotiationMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NegotiationMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NegotiationMessageAggregateArgs>(args: Subset<T, NegotiationMessageAggregateArgs>): Prisma.PrismaPromise<GetNegotiationMessageAggregateType<T>>

    /**
     * Group by NegotiationMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NegotiationMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NegotiationMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NegotiationMessageGroupByArgs['orderBy'] }
        : { orderBy?: NegotiationMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NegotiationMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNegotiationMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NegotiationMessage model
   */
  readonly fields: NegotiationMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NegotiationMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NegotiationMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    quote<T extends QuoteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuoteDefaultArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NegotiationMessage model
   */
  interface NegotiationMessageFieldRefs {
    readonly id: FieldRef<"NegotiationMessage", 'String'>
    readonly quoteId: FieldRef<"NegotiationMessage", 'String'>
    readonly sender: FieldRef<"NegotiationMessage", 'String'>
    readonly message: FieldRef<"NegotiationMessage", 'String'>
    readonly proposedChanges: FieldRef<"NegotiationMessage", 'Json'>
    readonly timestamp: FieldRef<"NegotiationMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NegotiationMessage findUnique
   */
  export type NegotiationMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NegotiationMessage
     */
    select?: NegotiationMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NegotiationMessage
     */
    omit?: NegotiationMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegotiationMessageInclude<ExtArgs> | null
    /**
     * Filter, which NegotiationMessage to fetch.
     */
    where: NegotiationMessageWhereUniqueInput
  }

  /**
   * NegotiationMessage findUniqueOrThrow
   */
  export type NegotiationMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NegotiationMessage
     */
    select?: NegotiationMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NegotiationMessage
     */
    omit?: NegotiationMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegotiationMessageInclude<ExtArgs> | null
    /**
     * Filter, which NegotiationMessage to fetch.
     */
    where: NegotiationMessageWhereUniqueInput
  }

  /**
   * NegotiationMessage findFirst
   */
  export type NegotiationMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NegotiationMessage
     */
    select?: NegotiationMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NegotiationMessage
     */
    omit?: NegotiationMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegotiationMessageInclude<ExtArgs> | null
    /**
     * Filter, which NegotiationMessage to fetch.
     */
    where?: NegotiationMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NegotiationMessages to fetch.
     */
    orderBy?: NegotiationMessageOrderByWithRelationInput | NegotiationMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NegotiationMessages.
     */
    cursor?: NegotiationMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NegotiationMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NegotiationMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NegotiationMessages.
     */
    distinct?: NegotiationMessageScalarFieldEnum | NegotiationMessageScalarFieldEnum[]
  }

  /**
   * NegotiationMessage findFirstOrThrow
   */
  export type NegotiationMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NegotiationMessage
     */
    select?: NegotiationMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NegotiationMessage
     */
    omit?: NegotiationMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegotiationMessageInclude<ExtArgs> | null
    /**
     * Filter, which NegotiationMessage to fetch.
     */
    where?: NegotiationMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NegotiationMessages to fetch.
     */
    orderBy?: NegotiationMessageOrderByWithRelationInput | NegotiationMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NegotiationMessages.
     */
    cursor?: NegotiationMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NegotiationMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NegotiationMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NegotiationMessages.
     */
    distinct?: NegotiationMessageScalarFieldEnum | NegotiationMessageScalarFieldEnum[]
  }

  /**
   * NegotiationMessage findMany
   */
  export type NegotiationMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NegotiationMessage
     */
    select?: NegotiationMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NegotiationMessage
     */
    omit?: NegotiationMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegotiationMessageInclude<ExtArgs> | null
    /**
     * Filter, which NegotiationMessages to fetch.
     */
    where?: NegotiationMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NegotiationMessages to fetch.
     */
    orderBy?: NegotiationMessageOrderByWithRelationInput | NegotiationMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NegotiationMessages.
     */
    cursor?: NegotiationMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NegotiationMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NegotiationMessages.
     */
    skip?: number
    distinct?: NegotiationMessageScalarFieldEnum | NegotiationMessageScalarFieldEnum[]
  }

  /**
   * NegotiationMessage create
   */
  export type NegotiationMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NegotiationMessage
     */
    select?: NegotiationMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NegotiationMessage
     */
    omit?: NegotiationMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegotiationMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a NegotiationMessage.
     */
    data: XOR<NegotiationMessageCreateInput, NegotiationMessageUncheckedCreateInput>
  }

  /**
   * NegotiationMessage createMany
   */
  export type NegotiationMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NegotiationMessages.
     */
    data: NegotiationMessageCreateManyInput | NegotiationMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NegotiationMessage createManyAndReturn
   */
  export type NegotiationMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NegotiationMessage
     */
    select?: NegotiationMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NegotiationMessage
     */
    omit?: NegotiationMessageOmit<ExtArgs> | null
    /**
     * The data used to create many NegotiationMessages.
     */
    data: NegotiationMessageCreateManyInput | NegotiationMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegotiationMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NegotiationMessage update
   */
  export type NegotiationMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NegotiationMessage
     */
    select?: NegotiationMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NegotiationMessage
     */
    omit?: NegotiationMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegotiationMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a NegotiationMessage.
     */
    data: XOR<NegotiationMessageUpdateInput, NegotiationMessageUncheckedUpdateInput>
    /**
     * Choose, which NegotiationMessage to update.
     */
    where: NegotiationMessageWhereUniqueInput
  }

  /**
   * NegotiationMessage updateMany
   */
  export type NegotiationMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NegotiationMessages.
     */
    data: XOR<NegotiationMessageUpdateManyMutationInput, NegotiationMessageUncheckedUpdateManyInput>
    /**
     * Filter which NegotiationMessages to update
     */
    where?: NegotiationMessageWhereInput
    /**
     * Limit how many NegotiationMessages to update.
     */
    limit?: number
  }

  /**
   * NegotiationMessage updateManyAndReturn
   */
  export type NegotiationMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NegotiationMessage
     */
    select?: NegotiationMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NegotiationMessage
     */
    omit?: NegotiationMessageOmit<ExtArgs> | null
    /**
     * The data used to update NegotiationMessages.
     */
    data: XOR<NegotiationMessageUpdateManyMutationInput, NegotiationMessageUncheckedUpdateManyInput>
    /**
     * Filter which NegotiationMessages to update
     */
    where?: NegotiationMessageWhereInput
    /**
     * Limit how many NegotiationMessages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegotiationMessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NegotiationMessage upsert
   */
  export type NegotiationMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NegotiationMessage
     */
    select?: NegotiationMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NegotiationMessage
     */
    omit?: NegotiationMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegotiationMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the NegotiationMessage to update in case it exists.
     */
    where: NegotiationMessageWhereUniqueInput
    /**
     * In case the NegotiationMessage found by the `where` argument doesn't exist, create a new NegotiationMessage with this data.
     */
    create: XOR<NegotiationMessageCreateInput, NegotiationMessageUncheckedCreateInput>
    /**
     * In case the NegotiationMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NegotiationMessageUpdateInput, NegotiationMessageUncheckedUpdateInput>
  }

  /**
   * NegotiationMessage delete
   */
  export type NegotiationMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NegotiationMessage
     */
    select?: NegotiationMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NegotiationMessage
     */
    omit?: NegotiationMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegotiationMessageInclude<ExtArgs> | null
    /**
     * Filter which NegotiationMessage to delete.
     */
    where: NegotiationMessageWhereUniqueInput
  }

  /**
   * NegotiationMessage deleteMany
   */
  export type NegotiationMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NegotiationMessages to delete
     */
    where?: NegotiationMessageWhereInput
    /**
     * Limit how many NegotiationMessages to delete.
     */
    limit?: number
  }

  /**
   * NegotiationMessage without action
   */
  export type NegotiationMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NegotiationMessage
     */
    select?: NegotiationMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NegotiationMessage
     */
    omit?: NegotiationMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegotiationMessageInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    finalPrice: number | null
  }

  export type OrderSumAggregateOutputType = {
    finalPrice: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: string | null
    requestId: string | null
    quoteId: string | null
    buyerId: string | null
    vendorId: string | null
    finalPrice: number | null
    deliveryDate: Date | null
    paymentTerms: string | null
    status: string | null
    orderDate: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: string | null
    requestId: string | null
    quoteId: string | null
    buyerId: string | null
    vendorId: string | null
    finalPrice: number | null
    deliveryDate: Date | null
    paymentTerms: string | null
    status: string | null
    orderDate: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    requestId: number
    quoteId: number
    buyerId: number
    vendorId: number
    finalPrice: number
    deliveryDate: number
    paymentTerms: number
    status: number
    orderDate: number
    trackingInfo: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    finalPrice?: true
  }

  export type OrderSumAggregateInputType = {
    finalPrice?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    requestId?: true
    quoteId?: true
    buyerId?: true
    vendorId?: true
    finalPrice?: true
    deliveryDate?: true
    paymentTerms?: true
    status?: true
    orderDate?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    requestId?: true
    quoteId?: true
    buyerId?: true
    vendorId?: true
    finalPrice?: true
    deliveryDate?: true
    paymentTerms?: true
    status?: true
    orderDate?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    requestId?: true
    quoteId?: true
    buyerId?: true
    vendorId?: true
    finalPrice?: true
    deliveryDate?: true
    paymentTerms?: true
    status?: true
    orderDate?: true
    trackingInfo?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: string
    requestId: string
    quoteId: string
    buyerId: string
    vendorId: string
    finalPrice: number
    deliveryDate: Date
    paymentTerms: string
    status: string
    orderDate: Date
    trackingInfo: JsonValue | null
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    quoteId?: boolean
    buyerId?: boolean
    vendorId?: boolean
    finalPrice?: boolean
    deliveryDate?: boolean
    paymentTerms?: boolean
    status?: boolean
    orderDate?: boolean
    trackingInfo?: boolean
    request?: boolean | ProcurementRequestDefaultArgs<ExtArgs>
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    quoteId?: boolean
    buyerId?: boolean
    vendorId?: boolean
    finalPrice?: boolean
    deliveryDate?: boolean
    paymentTerms?: boolean
    status?: boolean
    orderDate?: boolean
    trackingInfo?: boolean
    request?: boolean | ProcurementRequestDefaultArgs<ExtArgs>
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestId?: boolean
    quoteId?: boolean
    buyerId?: boolean
    vendorId?: boolean
    finalPrice?: boolean
    deliveryDate?: boolean
    paymentTerms?: boolean
    status?: boolean
    orderDate?: boolean
    trackingInfo?: boolean
    request?: boolean | ProcurementRequestDefaultArgs<ExtArgs>
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    requestId?: boolean
    quoteId?: boolean
    buyerId?: boolean
    vendorId?: boolean
    finalPrice?: boolean
    deliveryDate?: boolean
    paymentTerms?: boolean
    status?: boolean
    orderDate?: boolean
    trackingInfo?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "requestId" | "quoteId" | "buyerId" | "vendorId" | "finalPrice" | "deliveryDate" | "paymentTerms" | "status" | "orderDate" | "trackingInfo", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | ProcurementRequestDefaultArgs<ExtArgs>
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | ProcurementRequestDefaultArgs<ExtArgs>
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }
  export type OrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | ProcurementRequestDefaultArgs<ExtArgs>
    quote?: boolean | QuoteDefaultArgs<ExtArgs>
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
    vendor?: boolean | VendorDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      request: Prisma.$ProcurementRequestPayload<ExtArgs>
      quote: Prisma.$QuotePayload<ExtArgs>
      buyer: Prisma.$BuyerPayload<ExtArgs>
      vendor: Prisma.$VendorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      requestId: string
      quoteId: string
      buyerId: string
      vendorId: string
      finalPrice: number
      deliveryDate: Date
      paymentTerms: string
      status: string
      orderDate: Date
      trackingInfo: Prisma.JsonValue | null
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {OrderUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    request<T extends ProcurementRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProcurementRequestDefaultArgs<ExtArgs>>): Prisma__ProcurementRequestClient<$Result.GetResult<Prisma.$ProcurementRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    quote<T extends QuoteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuoteDefaultArgs<ExtArgs>>): Prisma__QuoteClient<$Result.GetResult<Prisma.$QuotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    buyer<T extends BuyerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BuyerDefaultArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    vendor<T extends VendorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VendorDefaultArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'String'>
    readonly requestId: FieldRef<"Order", 'String'>
    readonly quoteId: FieldRef<"Order", 'String'>
    readonly buyerId: FieldRef<"Order", 'String'>
    readonly vendorId: FieldRef<"Order", 'String'>
    readonly finalPrice: FieldRef<"Order", 'Float'>
    readonly deliveryDate: FieldRef<"Order", 'DateTime'>
    readonly paymentTerms: FieldRef<"Order", 'String'>
    readonly status: FieldRef<"Order", 'String'>
    readonly orderDate: FieldRef<"Order", 'DateTime'>
    readonly trackingInfo: FieldRef<"Order", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order updateManyAndReturn
   */
  export type OrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const VendorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    address: 'address',
    categories: 'categories',
    rating: 'rating',
    verified: 'verified',
    minOrderValue: 'minOrderValue',
    paymentTerms: 'paymentTerms',
    createdAt: 'createdAt'
  };

  export type VendorScalarFieldEnum = (typeof VendorScalarFieldEnum)[keyof typeof VendorScalarFieldEnum]


  export const BuyerScalarFieldEnum: {
    id: 'id',
    companyName: 'companyName',
    email: 'email',
    phone: 'phone',
    address: 'address',
    industry: 'industry',
    creditRating: 'creditRating',
    paymentHistory: 'paymentHistory',
    createdAt: 'createdAt'
  };

  export type BuyerScalarFieldEnum = (typeof BuyerScalarFieldEnum)[keyof typeof BuyerScalarFieldEnum]


  export const ProcurementRequestScalarFieldEnum: {
    id: 'id',
    buyerId: 'buyerId',
    productName: 'productName',
    category: 'category',
    quantity: 'quantity',
    unit: 'unit',
    specifications: 'specifications',
    deliveryDate: 'deliveryDate',
    deliveryAddress: 'deliveryAddress',
    maxBudget: 'maxBudget',
    status: 'status',
    urgency: 'urgency',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProcurementRequestScalarFieldEnum = (typeof ProcurementRequestScalarFieldEnum)[keyof typeof ProcurementRequestScalarFieldEnum]


  export const QuoteScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    vendorId: 'vendorId',
    unitPrice: 'unitPrice',
    totalPrice: 'totalPrice',
    deliveryDate: 'deliveryDate',
    paymentTerms: 'paymentTerms',
    notes: 'notes',
    status: 'status',
    validUntil: 'validUntil',
    createdAt: 'createdAt'
  };

  export type QuoteScalarFieldEnum = (typeof QuoteScalarFieldEnum)[keyof typeof QuoteScalarFieldEnum]


  export const NegotiationMessageScalarFieldEnum: {
    id: 'id',
    quoteId: 'quoteId',
    sender: 'sender',
    message: 'message',
    proposedChanges: 'proposedChanges',
    timestamp: 'timestamp'
  };

  export type NegotiationMessageScalarFieldEnum = (typeof NegotiationMessageScalarFieldEnum)[keyof typeof NegotiationMessageScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    requestId: 'requestId',
    quoteId: 'quoteId',
    buyerId: 'buyerId',
    vendorId: 'vendorId',
    finalPrice: 'finalPrice',
    deliveryDate: 'deliveryDate',
    paymentTerms: 'paymentTerms',
    status: 'status',
    orderDate: 'orderDate',
    trackingInfo: 'trackingInfo'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type VendorWhereInput = {
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    id?: StringFilter<"Vendor"> | string
    name?: StringFilter<"Vendor"> | string
    email?: StringFilter<"Vendor"> | string
    phone?: StringNullableFilter<"Vendor"> | string | null
    address?: StringNullableFilter<"Vendor"> | string | null
    categories?: StringNullableListFilter<"Vendor">
    rating?: FloatFilter<"Vendor"> | number
    verified?: BoolFilter<"Vendor"> | boolean
    minOrderValue?: FloatFilter<"Vendor"> | number
    paymentTerms?: StringFilter<"Vendor"> | string
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    quotes?: QuoteListRelationFilter
    orders?: OrderListRelationFilter
  }

  export type VendorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    categories?: SortOrder
    rating?: SortOrder
    verified?: SortOrder
    minOrderValue?: SortOrder
    paymentTerms?: SortOrder
    createdAt?: SortOrder
    quotes?: QuoteOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
  }

  export type VendorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    name?: StringFilter<"Vendor"> | string
    phone?: StringNullableFilter<"Vendor"> | string | null
    address?: StringNullableFilter<"Vendor"> | string | null
    categories?: StringNullableListFilter<"Vendor">
    rating?: FloatFilter<"Vendor"> | number
    verified?: BoolFilter<"Vendor"> | boolean
    minOrderValue?: FloatFilter<"Vendor"> | number
    paymentTerms?: StringFilter<"Vendor"> | string
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    quotes?: QuoteListRelationFilter
    orders?: OrderListRelationFilter
  }, "id" | "email">

  export type VendorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    categories?: SortOrder
    rating?: SortOrder
    verified?: SortOrder
    minOrderValue?: SortOrder
    paymentTerms?: SortOrder
    createdAt?: SortOrder
    _count?: VendorCountOrderByAggregateInput
    _avg?: VendorAvgOrderByAggregateInput
    _max?: VendorMaxOrderByAggregateInput
    _min?: VendorMinOrderByAggregateInput
    _sum?: VendorSumOrderByAggregateInput
  }

  export type VendorScalarWhereWithAggregatesInput = {
    AND?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    OR?: VendorScalarWhereWithAggregatesInput[]
    NOT?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Vendor"> | string
    name?: StringWithAggregatesFilter<"Vendor"> | string
    email?: StringWithAggregatesFilter<"Vendor"> | string
    phone?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    address?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    categories?: StringNullableListFilter<"Vendor">
    rating?: FloatWithAggregatesFilter<"Vendor"> | number
    verified?: BoolWithAggregatesFilter<"Vendor"> | boolean
    minOrderValue?: FloatWithAggregatesFilter<"Vendor"> | number
    paymentTerms?: StringWithAggregatesFilter<"Vendor"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Vendor"> | Date | string
  }

  export type BuyerWhereInput = {
    AND?: BuyerWhereInput | BuyerWhereInput[]
    OR?: BuyerWhereInput[]
    NOT?: BuyerWhereInput | BuyerWhereInput[]
    id?: StringFilter<"Buyer"> | string
    companyName?: StringFilter<"Buyer"> | string
    email?: StringFilter<"Buyer"> | string
    phone?: StringNullableFilter<"Buyer"> | string | null
    address?: StringNullableFilter<"Buyer"> | string | null
    industry?: StringNullableFilter<"Buyer"> | string | null
    creditRating?: StringFilter<"Buyer"> | string
    paymentHistory?: JsonNullableFilter<"Buyer">
    createdAt?: DateTimeFilter<"Buyer"> | Date | string
    procurementRequests?: ProcurementRequestListRelationFilter
    orders?: OrderListRelationFilter
  }

  export type BuyerOrderByWithRelationInput = {
    id?: SortOrder
    companyName?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    industry?: SortOrderInput | SortOrder
    creditRating?: SortOrder
    paymentHistory?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    procurementRequests?: ProcurementRequestOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
  }

  export type BuyerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: BuyerWhereInput | BuyerWhereInput[]
    OR?: BuyerWhereInput[]
    NOT?: BuyerWhereInput | BuyerWhereInput[]
    companyName?: StringFilter<"Buyer"> | string
    phone?: StringNullableFilter<"Buyer"> | string | null
    address?: StringNullableFilter<"Buyer"> | string | null
    industry?: StringNullableFilter<"Buyer"> | string | null
    creditRating?: StringFilter<"Buyer"> | string
    paymentHistory?: JsonNullableFilter<"Buyer">
    createdAt?: DateTimeFilter<"Buyer"> | Date | string
    procurementRequests?: ProcurementRequestListRelationFilter
    orders?: OrderListRelationFilter
  }, "id" | "email">

  export type BuyerOrderByWithAggregationInput = {
    id?: SortOrder
    companyName?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    industry?: SortOrderInput | SortOrder
    creditRating?: SortOrder
    paymentHistory?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: BuyerCountOrderByAggregateInput
    _max?: BuyerMaxOrderByAggregateInput
    _min?: BuyerMinOrderByAggregateInput
  }

  export type BuyerScalarWhereWithAggregatesInput = {
    AND?: BuyerScalarWhereWithAggregatesInput | BuyerScalarWhereWithAggregatesInput[]
    OR?: BuyerScalarWhereWithAggregatesInput[]
    NOT?: BuyerScalarWhereWithAggregatesInput | BuyerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Buyer"> | string
    companyName?: StringWithAggregatesFilter<"Buyer"> | string
    email?: StringWithAggregatesFilter<"Buyer"> | string
    phone?: StringNullableWithAggregatesFilter<"Buyer"> | string | null
    address?: StringNullableWithAggregatesFilter<"Buyer"> | string | null
    industry?: StringNullableWithAggregatesFilter<"Buyer"> | string | null
    creditRating?: StringWithAggregatesFilter<"Buyer"> | string
    paymentHistory?: JsonNullableWithAggregatesFilter<"Buyer">
    createdAt?: DateTimeWithAggregatesFilter<"Buyer"> | Date | string
  }

  export type ProcurementRequestWhereInput = {
    AND?: ProcurementRequestWhereInput | ProcurementRequestWhereInput[]
    OR?: ProcurementRequestWhereInput[]
    NOT?: ProcurementRequestWhereInput | ProcurementRequestWhereInput[]
    id?: StringFilter<"ProcurementRequest"> | string
    buyerId?: StringFilter<"ProcurementRequest"> | string
    productName?: StringFilter<"ProcurementRequest"> | string
    category?: StringFilter<"ProcurementRequest"> | string
    quantity?: FloatFilter<"ProcurementRequest"> | number
    unit?: StringFilter<"ProcurementRequest"> | string
    specifications?: JsonNullableFilter<"ProcurementRequest">
    deliveryDate?: DateTimeFilter<"ProcurementRequest"> | Date | string
    deliveryAddress?: StringNullableFilter<"ProcurementRequest"> | string | null
    maxBudget?: FloatNullableFilter<"ProcurementRequest"> | number | null
    status?: StringFilter<"ProcurementRequest"> | string
    urgency?: StringFilter<"ProcurementRequest"> | string
    createdAt?: DateTimeFilter<"ProcurementRequest"> | Date | string
    updatedAt?: DateTimeFilter<"ProcurementRequest"> | Date | string
    buyer?: XOR<BuyerScalarRelationFilter, BuyerWhereInput>
    quotes?: QuoteListRelationFilter
    orders?: OrderListRelationFilter
  }

  export type ProcurementRequestOrderByWithRelationInput = {
    id?: SortOrder
    buyerId?: SortOrder
    productName?: SortOrder
    category?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    specifications?: SortOrderInput | SortOrder
    deliveryDate?: SortOrder
    deliveryAddress?: SortOrderInput | SortOrder
    maxBudget?: SortOrderInput | SortOrder
    status?: SortOrder
    urgency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    buyer?: BuyerOrderByWithRelationInput
    quotes?: QuoteOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
  }

  export type ProcurementRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProcurementRequestWhereInput | ProcurementRequestWhereInput[]
    OR?: ProcurementRequestWhereInput[]
    NOT?: ProcurementRequestWhereInput | ProcurementRequestWhereInput[]
    buyerId?: StringFilter<"ProcurementRequest"> | string
    productName?: StringFilter<"ProcurementRequest"> | string
    category?: StringFilter<"ProcurementRequest"> | string
    quantity?: FloatFilter<"ProcurementRequest"> | number
    unit?: StringFilter<"ProcurementRequest"> | string
    specifications?: JsonNullableFilter<"ProcurementRequest">
    deliveryDate?: DateTimeFilter<"ProcurementRequest"> | Date | string
    deliveryAddress?: StringNullableFilter<"ProcurementRequest"> | string | null
    maxBudget?: FloatNullableFilter<"ProcurementRequest"> | number | null
    status?: StringFilter<"ProcurementRequest"> | string
    urgency?: StringFilter<"ProcurementRequest"> | string
    createdAt?: DateTimeFilter<"ProcurementRequest"> | Date | string
    updatedAt?: DateTimeFilter<"ProcurementRequest"> | Date | string
    buyer?: XOR<BuyerScalarRelationFilter, BuyerWhereInput>
    quotes?: QuoteListRelationFilter
    orders?: OrderListRelationFilter
  }, "id">

  export type ProcurementRequestOrderByWithAggregationInput = {
    id?: SortOrder
    buyerId?: SortOrder
    productName?: SortOrder
    category?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    specifications?: SortOrderInput | SortOrder
    deliveryDate?: SortOrder
    deliveryAddress?: SortOrderInput | SortOrder
    maxBudget?: SortOrderInput | SortOrder
    status?: SortOrder
    urgency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProcurementRequestCountOrderByAggregateInput
    _avg?: ProcurementRequestAvgOrderByAggregateInput
    _max?: ProcurementRequestMaxOrderByAggregateInput
    _min?: ProcurementRequestMinOrderByAggregateInput
    _sum?: ProcurementRequestSumOrderByAggregateInput
  }

  export type ProcurementRequestScalarWhereWithAggregatesInput = {
    AND?: ProcurementRequestScalarWhereWithAggregatesInput | ProcurementRequestScalarWhereWithAggregatesInput[]
    OR?: ProcurementRequestScalarWhereWithAggregatesInput[]
    NOT?: ProcurementRequestScalarWhereWithAggregatesInput | ProcurementRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProcurementRequest"> | string
    buyerId?: StringWithAggregatesFilter<"ProcurementRequest"> | string
    productName?: StringWithAggregatesFilter<"ProcurementRequest"> | string
    category?: StringWithAggregatesFilter<"ProcurementRequest"> | string
    quantity?: FloatWithAggregatesFilter<"ProcurementRequest"> | number
    unit?: StringWithAggregatesFilter<"ProcurementRequest"> | string
    specifications?: JsonNullableWithAggregatesFilter<"ProcurementRequest">
    deliveryDate?: DateTimeWithAggregatesFilter<"ProcurementRequest"> | Date | string
    deliveryAddress?: StringNullableWithAggregatesFilter<"ProcurementRequest"> | string | null
    maxBudget?: FloatNullableWithAggregatesFilter<"ProcurementRequest"> | number | null
    status?: StringWithAggregatesFilter<"ProcurementRequest"> | string
    urgency?: StringWithAggregatesFilter<"ProcurementRequest"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProcurementRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProcurementRequest"> | Date | string
  }

  export type QuoteWhereInput = {
    AND?: QuoteWhereInput | QuoteWhereInput[]
    OR?: QuoteWhereInput[]
    NOT?: QuoteWhereInput | QuoteWhereInput[]
    id?: StringFilter<"Quote"> | string
    requestId?: StringFilter<"Quote"> | string
    vendorId?: StringFilter<"Quote"> | string
    unitPrice?: FloatFilter<"Quote"> | number
    totalPrice?: FloatFilter<"Quote"> | number
    deliveryDate?: DateTimeFilter<"Quote"> | Date | string
    paymentTerms?: StringFilter<"Quote"> | string
    notes?: StringNullableFilter<"Quote"> | string | null
    status?: StringFilter<"Quote"> | string
    validUntil?: DateTimeNullableFilter<"Quote"> | Date | string | null
    createdAt?: DateTimeFilter<"Quote"> | Date | string
    request?: XOR<ProcurementRequestScalarRelationFilter, ProcurementRequestWhereInput>
    vendor?: XOR<VendorScalarRelationFilter, VendorWhereInput>
    negotiations?: NegotiationMessageListRelationFilter
    orders?: OrderListRelationFilter
  }

  export type QuoteOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    vendorId?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    deliveryDate?: SortOrder
    paymentTerms?: SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    validUntil?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    request?: ProcurementRequestOrderByWithRelationInput
    vendor?: VendorOrderByWithRelationInput
    negotiations?: NegotiationMessageOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
  }

  export type QuoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuoteWhereInput | QuoteWhereInput[]
    OR?: QuoteWhereInput[]
    NOT?: QuoteWhereInput | QuoteWhereInput[]
    requestId?: StringFilter<"Quote"> | string
    vendorId?: StringFilter<"Quote"> | string
    unitPrice?: FloatFilter<"Quote"> | number
    totalPrice?: FloatFilter<"Quote"> | number
    deliveryDate?: DateTimeFilter<"Quote"> | Date | string
    paymentTerms?: StringFilter<"Quote"> | string
    notes?: StringNullableFilter<"Quote"> | string | null
    status?: StringFilter<"Quote"> | string
    validUntil?: DateTimeNullableFilter<"Quote"> | Date | string | null
    createdAt?: DateTimeFilter<"Quote"> | Date | string
    request?: XOR<ProcurementRequestScalarRelationFilter, ProcurementRequestWhereInput>
    vendor?: XOR<VendorScalarRelationFilter, VendorWhereInput>
    negotiations?: NegotiationMessageListRelationFilter
    orders?: OrderListRelationFilter
  }, "id">

  export type QuoteOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    vendorId?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    deliveryDate?: SortOrder
    paymentTerms?: SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    validUntil?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: QuoteCountOrderByAggregateInput
    _avg?: QuoteAvgOrderByAggregateInput
    _max?: QuoteMaxOrderByAggregateInput
    _min?: QuoteMinOrderByAggregateInput
    _sum?: QuoteSumOrderByAggregateInput
  }

  export type QuoteScalarWhereWithAggregatesInput = {
    AND?: QuoteScalarWhereWithAggregatesInput | QuoteScalarWhereWithAggregatesInput[]
    OR?: QuoteScalarWhereWithAggregatesInput[]
    NOT?: QuoteScalarWhereWithAggregatesInput | QuoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Quote"> | string
    requestId?: StringWithAggregatesFilter<"Quote"> | string
    vendorId?: StringWithAggregatesFilter<"Quote"> | string
    unitPrice?: FloatWithAggregatesFilter<"Quote"> | number
    totalPrice?: FloatWithAggregatesFilter<"Quote"> | number
    deliveryDate?: DateTimeWithAggregatesFilter<"Quote"> | Date | string
    paymentTerms?: StringWithAggregatesFilter<"Quote"> | string
    notes?: StringNullableWithAggregatesFilter<"Quote"> | string | null
    status?: StringWithAggregatesFilter<"Quote"> | string
    validUntil?: DateTimeNullableWithAggregatesFilter<"Quote"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Quote"> | Date | string
  }

  export type NegotiationMessageWhereInput = {
    AND?: NegotiationMessageWhereInput | NegotiationMessageWhereInput[]
    OR?: NegotiationMessageWhereInput[]
    NOT?: NegotiationMessageWhereInput | NegotiationMessageWhereInput[]
    id?: StringFilter<"NegotiationMessage"> | string
    quoteId?: StringFilter<"NegotiationMessage"> | string
    sender?: StringFilter<"NegotiationMessage"> | string
    message?: StringFilter<"NegotiationMessage"> | string
    proposedChanges?: JsonNullableFilter<"NegotiationMessage">
    timestamp?: DateTimeFilter<"NegotiationMessage"> | Date | string
    quote?: XOR<QuoteScalarRelationFilter, QuoteWhereInput>
  }

  export type NegotiationMessageOrderByWithRelationInput = {
    id?: SortOrder
    quoteId?: SortOrder
    sender?: SortOrder
    message?: SortOrder
    proposedChanges?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    quote?: QuoteOrderByWithRelationInput
  }

  export type NegotiationMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NegotiationMessageWhereInput | NegotiationMessageWhereInput[]
    OR?: NegotiationMessageWhereInput[]
    NOT?: NegotiationMessageWhereInput | NegotiationMessageWhereInput[]
    quoteId?: StringFilter<"NegotiationMessage"> | string
    sender?: StringFilter<"NegotiationMessage"> | string
    message?: StringFilter<"NegotiationMessage"> | string
    proposedChanges?: JsonNullableFilter<"NegotiationMessage">
    timestamp?: DateTimeFilter<"NegotiationMessage"> | Date | string
    quote?: XOR<QuoteScalarRelationFilter, QuoteWhereInput>
  }, "id">

  export type NegotiationMessageOrderByWithAggregationInput = {
    id?: SortOrder
    quoteId?: SortOrder
    sender?: SortOrder
    message?: SortOrder
    proposedChanges?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: NegotiationMessageCountOrderByAggregateInput
    _max?: NegotiationMessageMaxOrderByAggregateInput
    _min?: NegotiationMessageMinOrderByAggregateInput
  }

  export type NegotiationMessageScalarWhereWithAggregatesInput = {
    AND?: NegotiationMessageScalarWhereWithAggregatesInput | NegotiationMessageScalarWhereWithAggregatesInput[]
    OR?: NegotiationMessageScalarWhereWithAggregatesInput[]
    NOT?: NegotiationMessageScalarWhereWithAggregatesInput | NegotiationMessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NegotiationMessage"> | string
    quoteId?: StringWithAggregatesFilter<"NegotiationMessage"> | string
    sender?: StringWithAggregatesFilter<"NegotiationMessage"> | string
    message?: StringWithAggregatesFilter<"NegotiationMessage"> | string
    proposedChanges?: JsonNullableWithAggregatesFilter<"NegotiationMessage">
    timestamp?: DateTimeWithAggregatesFilter<"NegotiationMessage"> | Date | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: StringFilter<"Order"> | string
    requestId?: StringFilter<"Order"> | string
    quoteId?: StringFilter<"Order"> | string
    buyerId?: StringFilter<"Order"> | string
    vendorId?: StringFilter<"Order"> | string
    finalPrice?: FloatFilter<"Order"> | number
    deliveryDate?: DateTimeFilter<"Order"> | Date | string
    paymentTerms?: StringFilter<"Order"> | string
    status?: StringFilter<"Order"> | string
    orderDate?: DateTimeFilter<"Order"> | Date | string
    trackingInfo?: JsonNullableFilter<"Order">
    request?: XOR<ProcurementRequestScalarRelationFilter, ProcurementRequestWhereInput>
    quote?: XOR<QuoteScalarRelationFilter, QuoteWhereInput>
    buyer?: XOR<BuyerScalarRelationFilter, BuyerWhereInput>
    vendor?: XOR<VendorScalarRelationFilter, VendorWhereInput>
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    requestId?: SortOrder
    quoteId?: SortOrder
    buyerId?: SortOrder
    vendorId?: SortOrder
    finalPrice?: SortOrder
    deliveryDate?: SortOrder
    paymentTerms?: SortOrder
    status?: SortOrder
    orderDate?: SortOrder
    trackingInfo?: SortOrderInput | SortOrder
    request?: ProcurementRequestOrderByWithRelationInput
    quote?: QuoteOrderByWithRelationInput
    buyer?: BuyerOrderByWithRelationInput
    vendor?: VendorOrderByWithRelationInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    requestId?: StringFilter<"Order"> | string
    quoteId?: StringFilter<"Order"> | string
    buyerId?: StringFilter<"Order"> | string
    vendorId?: StringFilter<"Order"> | string
    finalPrice?: FloatFilter<"Order"> | number
    deliveryDate?: DateTimeFilter<"Order"> | Date | string
    paymentTerms?: StringFilter<"Order"> | string
    status?: StringFilter<"Order"> | string
    orderDate?: DateTimeFilter<"Order"> | Date | string
    trackingInfo?: JsonNullableFilter<"Order">
    request?: XOR<ProcurementRequestScalarRelationFilter, ProcurementRequestWhereInput>
    quote?: XOR<QuoteScalarRelationFilter, QuoteWhereInput>
    buyer?: XOR<BuyerScalarRelationFilter, BuyerWhereInput>
    vendor?: XOR<VendorScalarRelationFilter, VendorWhereInput>
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    requestId?: SortOrder
    quoteId?: SortOrder
    buyerId?: SortOrder
    vendorId?: SortOrder
    finalPrice?: SortOrder
    deliveryDate?: SortOrder
    paymentTerms?: SortOrder
    status?: SortOrder
    orderDate?: SortOrder
    trackingInfo?: SortOrderInput | SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Order"> | string
    requestId?: StringWithAggregatesFilter<"Order"> | string
    quoteId?: StringWithAggregatesFilter<"Order"> | string
    buyerId?: StringWithAggregatesFilter<"Order"> | string
    vendorId?: StringWithAggregatesFilter<"Order"> | string
    finalPrice?: FloatWithAggregatesFilter<"Order"> | number
    deliveryDate?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    paymentTerms?: StringWithAggregatesFilter<"Order"> | string
    status?: StringWithAggregatesFilter<"Order"> | string
    orderDate?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    trackingInfo?: JsonNullableWithAggregatesFilter<"Order">
  }

  export type VendorCreateInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address?: string | null
    categories?: VendorCreatecategoriesInput | string[]
    rating?: number
    verified?: boolean
    minOrderValue?: number
    paymentTerms?: string
    createdAt?: Date | string
    quotes?: QuoteCreateNestedManyWithoutVendorInput
    orders?: OrderCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address?: string | null
    categories?: VendorCreatecategoriesInput | string[]
    rating?: number
    verified?: boolean
    minOrderValue?: number
    paymentTerms?: string
    createdAt?: Date | string
    quotes?: QuoteUncheckedCreateNestedManyWithoutVendorInput
    orders?: OrderUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: VendorUpdatecategoriesInput | string[]
    rating?: FloatFieldUpdateOperationsInput | number
    verified?: BoolFieldUpdateOperationsInput | boolean
    minOrderValue?: FloatFieldUpdateOperationsInput | number
    paymentTerms?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotes?: QuoteUpdateManyWithoutVendorNestedInput
    orders?: OrderUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: VendorUpdatecategoriesInput | string[]
    rating?: FloatFieldUpdateOperationsInput | number
    verified?: BoolFieldUpdateOperationsInput | boolean
    minOrderValue?: FloatFieldUpdateOperationsInput | number
    paymentTerms?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotes?: QuoteUncheckedUpdateManyWithoutVendorNestedInput
    orders?: OrderUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type VendorCreateManyInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address?: string | null
    categories?: VendorCreatecategoriesInput | string[]
    rating?: number
    verified?: boolean
    minOrderValue?: number
    paymentTerms?: string
    createdAt?: Date | string
  }

  export type VendorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: VendorUpdatecategoriesInput | string[]
    rating?: FloatFieldUpdateOperationsInput | number
    verified?: BoolFieldUpdateOperationsInput | boolean
    minOrderValue?: FloatFieldUpdateOperationsInput | number
    paymentTerms?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: VendorUpdatecategoriesInput | string[]
    rating?: FloatFieldUpdateOperationsInput | number
    verified?: BoolFieldUpdateOperationsInput | boolean
    minOrderValue?: FloatFieldUpdateOperationsInput | number
    paymentTerms?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerCreateInput = {
    id?: string
    companyName: string
    email: string
    phone?: string | null
    address?: string | null
    industry?: string | null
    creditRating?: string
    paymentHistory?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    procurementRequests?: ProcurementRequestCreateNestedManyWithoutBuyerInput
    orders?: OrderCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUncheckedCreateInput = {
    id?: string
    companyName: string
    email: string
    phone?: string | null
    address?: string | null
    industry?: string | null
    creditRating?: string
    paymentHistory?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    procurementRequests?: ProcurementRequestUncheckedCreateNestedManyWithoutBuyerInput
    orders?: OrderUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    creditRating?: StringFieldUpdateOperationsInput | string
    paymentHistory?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    procurementRequests?: ProcurementRequestUpdateManyWithoutBuyerNestedInput
    orders?: OrderUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    creditRating?: StringFieldUpdateOperationsInput | string
    paymentHistory?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    procurementRequests?: ProcurementRequestUncheckedUpdateManyWithoutBuyerNestedInput
    orders?: OrderUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerCreateManyInput = {
    id?: string
    companyName: string
    email: string
    phone?: string | null
    address?: string | null
    industry?: string | null
    creditRating?: string
    paymentHistory?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type BuyerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    creditRating?: StringFieldUpdateOperationsInput | string
    paymentHistory?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    creditRating?: StringFieldUpdateOperationsInput | string
    paymentHistory?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcurementRequestCreateInput = {
    id?: string
    productName: string
    category: string
    quantity: number
    unit: string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate: Date | string
    deliveryAddress?: string | null
    maxBudget?: number | null
    status?: string
    urgency?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer: BuyerCreateNestedOneWithoutProcurementRequestsInput
    quotes?: QuoteCreateNestedManyWithoutRequestInput
    orders?: OrderCreateNestedManyWithoutRequestInput
  }

  export type ProcurementRequestUncheckedCreateInput = {
    id?: string
    buyerId: string
    productName: string
    category: string
    quantity: number
    unit: string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate: Date | string
    deliveryAddress?: string | null
    maxBudget?: number | null
    status?: string
    urgency?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    quotes?: QuoteUncheckedCreateNestedManyWithoutRequestInput
    orders?: OrderUncheckedCreateNestedManyWithoutRequestInput
  }

  export type ProcurementRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryAddress?: NullableStringFieldUpdateOperationsInput | string | null
    maxBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    urgency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: BuyerUpdateOneRequiredWithoutProcurementRequestsNestedInput
    quotes?: QuoteUpdateManyWithoutRequestNestedInput
    orders?: OrderUpdateManyWithoutRequestNestedInput
  }

  export type ProcurementRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    buyerId?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryAddress?: NullableStringFieldUpdateOperationsInput | string | null
    maxBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    urgency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotes?: QuoteUncheckedUpdateManyWithoutRequestNestedInput
    orders?: OrderUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type ProcurementRequestCreateManyInput = {
    id?: string
    buyerId: string
    productName: string
    category: string
    quantity: number
    unit: string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate: Date | string
    deliveryAddress?: string | null
    maxBudget?: number | null
    status?: string
    urgency?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProcurementRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryAddress?: NullableStringFieldUpdateOperationsInput | string | null
    maxBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    urgency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcurementRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    buyerId?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryAddress?: NullableStringFieldUpdateOperationsInput | string | null
    maxBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    urgency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuoteCreateInput = {
    id?: string
    unitPrice: number
    totalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    notes?: string | null
    status?: string
    validUntil?: Date | string | null
    createdAt?: Date | string
    request: ProcurementRequestCreateNestedOneWithoutQuotesInput
    vendor: VendorCreateNestedOneWithoutQuotesInput
    negotiations?: NegotiationMessageCreateNestedManyWithoutQuoteInput
    orders?: OrderCreateNestedManyWithoutQuoteInput
  }

  export type QuoteUncheckedCreateInput = {
    id?: string
    requestId: string
    vendorId: string
    unitPrice: number
    totalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    notes?: string | null
    status?: string
    validUntil?: Date | string | null
    createdAt?: Date | string
    negotiations?: NegotiationMessageUncheckedCreateNestedManyWithoutQuoteInput
    orders?: OrderUncheckedCreateNestedManyWithoutQuoteInput
  }

  export type QuoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: ProcurementRequestUpdateOneRequiredWithoutQuotesNestedInput
    vendor?: VendorUpdateOneRequiredWithoutQuotesNestedInput
    negotiations?: NegotiationMessageUpdateManyWithoutQuoteNestedInput
    orders?: OrderUpdateManyWithoutQuoteNestedInput
  }

  export type QuoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    negotiations?: NegotiationMessageUncheckedUpdateManyWithoutQuoteNestedInput
    orders?: OrderUncheckedUpdateManyWithoutQuoteNestedInput
  }

  export type QuoteCreateManyInput = {
    id?: string
    requestId: string
    vendorId: string
    unitPrice: number
    totalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    notes?: string | null
    status?: string
    validUntil?: Date | string | null
    createdAt?: Date | string
  }

  export type QuoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NegotiationMessageCreateInput = {
    id?: string
    sender: string
    message: string
    proposedChanges?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    quote: QuoteCreateNestedOneWithoutNegotiationsInput
  }

  export type NegotiationMessageUncheckedCreateInput = {
    id?: string
    quoteId: string
    sender: string
    message: string
    proposedChanges?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type NegotiationMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    proposedChanges?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    quote?: QuoteUpdateOneRequiredWithoutNegotiationsNestedInput
  }

  export type NegotiationMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quoteId?: StringFieldUpdateOperationsInput | string
    sender?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    proposedChanges?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NegotiationMessageCreateManyInput = {
    id?: string
    quoteId: string
    sender: string
    message: string
    proposedChanges?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type NegotiationMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    proposedChanges?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NegotiationMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    quoteId?: StringFieldUpdateOperationsInput | string
    sender?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    proposedChanges?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateInput = {
    id?: string
    finalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    status?: string
    orderDate?: Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
    request: ProcurementRequestCreateNestedOneWithoutOrdersInput
    quote: QuoteCreateNestedOneWithoutOrdersInput
    buyer: BuyerCreateNestedOneWithoutOrdersInput
    vendor: VendorCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateInput = {
    id?: string
    requestId: string
    quoteId: string
    buyerId: string
    vendorId: string
    finalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    status?: string
    orderDate?: Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type OrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    finalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
    request?: ProcurementRequestUpdateOneRequiredWithoutOrdersNestedInput
    quote?: QuoteUpdateOneRequiredWithoutOrdersNestedInput
    buyer?: BuyerUpdateOneRequiredWithoutOrdersNestedInput
    vendor?: VendorUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    quoteId?: StringFieldUpdateOperationsInput | string
    buyerId?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    finalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type OrderCreateManyInput = {
    id?: string
    requestId: string
    quoteId: string
    buyerId: string
    vendorId: string
    finalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    status?: string
    orderDate?: Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type OrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    finalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    quoteId?: StringFieldUpdateOperationsInput | string
    buyerId?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    finalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type QuoteListRelationFilter = {
    every?: QuoteWhereInput
    some?: QuoteWhereInput
    none?: QuoteWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type QuoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VendorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    categories?: SortOrder
    rating?: SortOrder
    verified?: SortOrder
    minOrderValue?: SortOrder
    paymentTerms?: SortOrder
    createdAt?: SortOrder
  }

  export type VendorAvgOrderByAggregateInput = {
    rating?: SortOrder
    minOrderValue?: SortOrder
  }

  export type VendorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    rating?: SortOrder
    verified?: SortOrder
    minOrderValue?: SortOrder
    paymentTerms?: SortOrder
    createdAt?: SortOrder
  }

  export type VendorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    rating?: SortOrder
    verified?: SortOrder
    minOrderValue?: SortOrder
    paymentTerms?: SortOrder
    createdAt?: SortOrder
  }

  export type VendorSumOrderByAggregateInput = {
    rating?: SortOrder
    minOrderValue?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ProcurementRequestListRelationFilter = {
    every?: ProcurementRequestWhereInput
    some?: ProcurementRequestWhereInput
    none?: ProcurementRequestWhereInput
  }

  export type ProcurementRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BuyerCountOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    industry?: SortOrder
    creditRating?: SortOrder
    paymentHistory?: SortOrder
    createdAt?: SortOrder
  }

  export type BuyerMaxOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    industry?: SortOrder
    creditRating?: SortOrder
    createdAt?: SortOrder
  }

  export type BuyerMinOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    industry?: SortOrder
    creditRating?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BuyerScalarRelationFilter = {
    is?: BuyerWhereInput
    isNot?: BuyerWhereInput
  }

  export type ProcurementRequestCountOrderByAggregateInput = {
    id?: SortOrder
    buyerId?: SortOrder
    productName?: SortOrder
    category?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    specifications?: SortOrder
    deliveryDate?: SortOrder
    deliveryAddress?: SortOrder
    maxBudget?: SortOrder
    status?: SortOrder
    urgency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProcurementRequestAvgOrderByAggregateInput = {
    quantity?: SortOrder
    maxBudget?: SortOrder
  }

  export type ProcurementRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    buyerId?: SortOrder
    productName?: SortOrder
    category?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    deliveryDate?: SortOrder
    deliveryAddress?: SortOrder
    maxBudget?: SortOrder
    status?: SortOrder
    urgency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProcurementRequestMinOrderByAggregateInput = {
    id?: SortOrder
    buyerId?: SortOrder
    productName?: SortOrder
    category?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
    deliveryDate?: SortOrder
    deliveryAddress?: SortOrder
    maxBudget?: SortOrder
    status?: SortOrder
    urgency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProcurementRequestSumOrderByAggregateInput = {
    quantity?: SortOrder
    maxBudget?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ProcurementRequestScalarRelationFilter = {
    is?: ProcurementRequestWhereInput
    isNot?: ProcurementRequestWhereInput
  }

  export type VendorScalarRelationFilter = {
    is?: VendorWhereInput
    isNot?: VendorWhereInput
  }

  export type NegotiationMessageListRelationFilter = {
    every?: NegotiationMessageWhereInput
    some?: NegotiationMessageWhereInput
    none?: NegotiationMessageWhereInput
  }

  export type NegotiationMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuoteCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    vendorId?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    deliveryDate?: SortOrder
    paymentTerms?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    validUntil?: SortOrder
    createdAt?: SortOrder
  }

  export type QuoteAvgOrderByAggregateInput = {
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type QuoteMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    vendorId?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    deliveryDate?: SortOrder
    paymentTerms?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    validUntil?: SortOrder
    createdAt?: SortOrder
  }

  export type QuoteMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    vendorId?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    deliveryDate?: SortOrder
    paymentTerms?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    validUntil?: SortOrder
    createdAt?: SortOrder
  }

  export type QuoteSumOrderByAggregateInput = {
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type QuoteScalarRelationFilter = {
    is?: QuoteWhereInput
    isNot?: QuoteWhereInput
  }

  export type NegotiationMessageCountOrderByAggregateInput = {
    id?: SortOrder
    quoteId?: SortOrder
    sender?: SortOrder
    message?: SortOrder
    proposedChanges?: SortOrder
    timestamp?: SortOrder
  }

  export type NegotiationMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    quoteId?: SortOrder
    sender?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
  }

  export type NegotiationMessageMinOrderByAggregateInput = {
    id?: SortOrder
    quoteId?: SortOrder
    sender?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    quoteId?: SortOrder
    buyerId?: SortOrder
    vendorId?: SortOrder
    finalPrice?: SortOrder
    deliveryDate?: SortOrder
    paymentTerms?: SortOrder
    status?: SortOrder
    orderDate?: SortOrder
    trackingInfo?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    finalPrice?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    quoteId?: SortOrder
    buyerId?: SortOrder
    vendorId?: SortOrder
    finalPrice?: SortOrder
    deliveryDate?: SortOrder
    paymentTerms?: SortOrder
    status?: SortOrder
    orderDate?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    requestId?: SortOrder
    quoteId?: SortOrder
    buyerId?: SortOrder
    vendorId?: SortOrder
    finalPrice?: SortOrder
    deliveryDate?: SortOrder
    paymentTerms?: SortOrder
    status?: SortOrder
    orderDate?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    finalPrice?: SortOrder
  }

  export type VendorCreatecategoriesInput = {
    set: string[]
  }

  export type QuoteCreateNestedManyWithoutVendorInput = {
    create?: XOR<QuoteCreateWithoutVendorInput, QuoteUncheckedCreateWithoutVendorInput> | QuoteCreateWithoutVendorInput[] | QuoteUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: QuoteCreateOrConnectWithoutVendorInput | QuoteCreateOrConnectWithoutVendorInput[]
    createMany?: QuoteCreateManyVendorInputEnvelope
    connect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutVendorInput = {
    create?: XOR<OrderCreateWithoutVendorInput, OrderUncheckedCreateWithoutVendorInput> | OrderCreateWithoutVendorInput[] | OrderUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutVendorInput | OrderCreateOrConnectWithoutVendorInput[]
    createMany?: OrderCreateManyVendorInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type QuoteUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<QuoteCreateWithoutVendorInput, QuoteUncheckedCreateWithoutVendorInput> | QuoteCreateWithoutVendorInput[] | QuoteUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: QuoteCreateOrConnectWithoutVendorInput | QuoteCreateOrConnectWithoutVendorInput[]
    createMany?: QuoteCreateManyVendorInputEnvelope
    connect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<OrderCreateWithoutVendorInput, OrderUncheckedCreateWithoutVendorInput> | OrderCreateWithoutVendorInput[] | OrderUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutVendorInput | OrderCreateOrConnectWithoutVendorInput[]
    createMany?: OrderCreateManyVendorInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type VendorUpdatecategoriesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type QuoteUpdateManyWithoutVendorNestedInput = {
    create?: XOR<QuoteCreateWithoutVendorInput, QuoteUncheckedCreateWithoutVendorInput> | QuoteCreateWithoutVendorInput[] | QuoteUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: QuoteCreateOrConnectWithoutVendorInput | QuoteCreateOrConnectWithoutVendorInput[]
    upsert?: QuoteUpsertWithWhereUniqueWithoutVendorInput | QuoteUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: QuoteCreateManyVendorInputEnvelope
    set?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    disconnect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    delete?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    connect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    update?: QuoteUpdateWithWhereUniqueWithoutVendorInput | QuoteUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: QuoteUpdateManyWithWhereWithoutVendorInput | QuoteUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: QuoteScalarWhereInput | QuoteScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutVendorNestedInput = {
    create?: XOR<OrderCreateWithoutVendorInput, OrderUncheckedCreateWithoutVendorInput> | OrderCreateWithoutVendorInput[] | OrderUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutVendorInput | OrderCreateOrConnectWithoutVendorInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutVendorInput | OrderUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: OrderCreateManyVendorInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutVendorInput | OrderUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutVendorInput | OrderUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type QuoteUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<QuoteCreateWithoutVendorInput, QuoteUncheckedCreateWithoutVendorInput> | QuoteCreateWithoutVendorInput[] | QuoteUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: QuoteCreateOrConnectWithoutVendorInput | QuoteCreateOrConnectWithoutVendorInput[]
    upsert?: QuoteUpsertWithWhereUniqueWithoutVendorInput | QuoteUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: QuoteCreateManyVendorInputEnvelope
    set?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    disconnect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    delete?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    connect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    update?: QuoteUpdateWithWhereUniqueWithoutVendorInput | QuoteUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: QuoteUpdateManyWithWhereWithoutVendorInput | QuoteUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: QuoteScalarWhereInput | QuoteScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<OrderCreateWithoutVendorInput, OrderUncheckedCreateWithoutVendorInput> | OrderCreateWithoutVendorInput[] | OrderUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutVendorInput | OrderCreateOrConnectWithoutVendorInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutVendorInput | OrderUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: OrderCreateManyVendorInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutVendorInput | OrderUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutVendorInput | OrderUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ProcurementRequestCreateNestedManyWithoutBuyerInput = {
    create?: XOR<ProcurementRequestCreateWithoutBuyerInput, ProcurementRequestUncheckedCreateWithoutBuyerInput> | ProcurementRequestCreateWithoutBuyerInput[] | ProcurementRequestUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: ProcurementRequestCreateOrConnectWithoutBuyerInput | ProcurementRequestCreateOrConnectWithoutBuyerInput[]
    createMany?: ProcurementRequestCreateManyBuyerInputEnvelope
    connect?: ProcurementRequestWhereUniqueInput | ProcurementRequestWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutBuyerInput = {
    create?: XOR<OrderCreateWithoutBuyerInput, OrderUncheckedCreateWithoutBuyerInput> | OrderCreateWithoutBuyerInput[] | OrderUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutBuyerInput | OrderCreateOrConnectWithoutBuyerInput[]
    createMany?: OrderCreateManyBuyerInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ProcurementRequestUncheckedCreateNestedManyWithoutBuyerInput = {
    create?: XOR<ProcurementRequestCreateWithoutBuyerInput, ProcurementRequestUncheckedCreateWithoutBuyerInput> | ProcurementRequestCreateWithoutBuyerInput[] | ProcurementRequestUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: ProcurementRequestCreateOrConnectWithoutBuyerInput | ProcurementRequestCreateOrConnectWithoutBuyerInput[]
    createMany?: ProcurementRequestCreateManyBuyerInputEnvelope
    connect?: ProcurementRequestWhereUniqueInput | ProcurementRequestWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutBuyerInput = {
    create?: XOR<OrderCreateWithoutBuyerInput, OrderUncheckedCreateWithoutBuyerInput> | OrderCreateWithoutBuyerInput[] | OrderUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutBuyerInput | OrderCreateOrConnectWithoutBuyerInput[]
    createMany?: OrderCreateManyBuyerInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ProcurementRequestUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<ProcurementRequestCreateWithoutBuyerInput, ProcurementRequestUncheckedCreateWithoutBuyerInput> | ProcurementRequestCreateWithoutBuyerInput[] | ProcurementRequestUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: ProcurementRequestCreateOrConnectWithoutBuyerInput | ProcurementRequestCreateOrConnectWithoutBuyerInput[]
    upsert?: ProcurementRequestUpsertWithWhereUniqueWithoutBuyerInput | ProcurementRequestUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: ProcurementRequestCreateManyBuyerInputEnvelope
    set?: ProcurementRequestWhereUniqueInput | ProcurementRequestWhereUniqueInput[]
    disconnect?: ProcurementRequestWhereUniqueInput | ProcurementRequestWhereUniqueInput[]
    delete?: ProcurementRequestWhereUniqueInput | ProcurementRequestWhereUniqueInput[]
    connect?: ProcurementRequestWhereUniqueInput | ProcurementRequestWhereUniqueInput[]
    update?: ProcurementRequestUpdateWithWhereUniqueWithoutBuyerInput | ProcurementRequestUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: ProcurementRequestUpdateManyWithWhereWithoutBuyerInput | ProcurementRequestUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: ProcurementRequestScalarWhereInput | ProcurementRequestScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<OrderCreateWithoutBuyerInput, OrderUncheckedCreateWithoutBuyerInput> | OrderCreateWithoutBuyerInput[] | OrderUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutBuyerInput | OrderCreateOrConnectWithoutBuyerInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutBuyerInput | OrderUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: OrderCreateManyBuyerInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutBuyerInput | OrderUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutBuyerInput | OrderUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ProcurementRequestUncheckedUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<ProcurementRequestCreateWithoutBuyerInput, ProcurementRequestUncheckedCreateWithoutBuyerInput> | ProcurementRequestCreateWithoutBuyerInput[] | ProcurementRequestUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: ProcurementRequestCreateOrConnectWithoutBuyerInput | ProcurementRequestCreateOrConnectWithoutBuyerInput[]
    upsert?: ProcurementRequestUpsertWithWhereUniqueWithoutBuyerInput | ProcurementRequestUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: ProcurementRequestCreateManyBuyerInputEnvelope
    set?: ProcurementRequestWhereUniqueInput | ProcurementRequestWhereUniqueInput[]
    disconnect?: ProcurementRequestWhereUniqueInput | ProcurementRequestWhereUniqueInput[]
    delete?: ProcurementRequestWhereUniqueInput | ProcurementRequestWhereUniqueInput[]
    connect?: ProcurementRequestWhereUniqueInput | ProcurementRequestWhereUniqueInput[]
    update?: ProcurementRequestUpdateWithWhereUniqueWithoutBuyerInput | ProcurementRequestUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: ProcurementRequestUpdateManyWithWhereWithoutBuyerInput | ProcurementRequestUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: ProcurementRequestScalarWhereInput | ProcurementRequestScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<OrderCreateWithoutBuyerInput, OrderUncheckedCreateWithoutBuyerInput> | OrderCreateWithoutBuyerInput[] | OrderUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutBuyerInput | OrderCreateOrConnectWithoutBuyerInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutBuyerInput | OrderUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: OrderCreateManyBuyerInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutBuyerInput | OrderUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutBuyerInput | OrderUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type BuyerCreateNestedOneWithoutProcurementRequestsInput = {
    create?: XOR<BuyerCreateWithoutProcurementRequestsInput, BuyerUncheckedCreateWithoutProcurementRequestsInput>
    connectOrCreate?: BuyerCreateOrConnectWithoutProcurementRequestsInput
    connect?: BuyerWhereUniqueInput
  }

  export type QuoteCreateNestedManyWithoutRequestInput = {
    create?: XOR<QuoteCreateWithoutRequestInput, QuoteUncheckedCreateWithoutRequestInput> | QuoteCreateWithoutRequestInput[] | QuoteUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: QuoteCreateOrConnectWithoutRequestInput | QuoteCreateOrConnectWithoutRequestInput[]
    createMany?: QuoteCreateManyRequestInputEnvelope
    connect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutRequestInput = {
    create?: XOR<OrderCreateWithoutRequestInput, OrderUncheckedCreateWithoutRequestInput> | OrderCreateWithoutRequestInput[] | OrderUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutRequestInput | OrderCreateOrConnectWithoutRequestInput[]
    createMany?: OrderCreateManyRequestInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type QuoteUncheckedCreateNestedManyWithoutRequestInput = {
    create?: XOR<QuoteCreateWithoutRequestInput, QuoteUncheckedCreateWithoutRequestInput> | QuoteCreateWithoutRequestInput[] | QuoteUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: QuoteCreateOrConnectWithoutRequestInput | QuoteCreateOrConnectWithoutRequestInput[]
    createMany?: QuoteCreateManyRequestInputEnvelope
    connect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutRequestInput = {
    create?: XOR<OrderCreateWithoutRequestInput, OrderUncheckedCreateWithoutRequestInput> | OrderCreateWithoutRequestInput[] | OrderUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutRequestInput | OrderCreateOrConnectWithoutRequestInput[]
    createMany?: OrderCreateManyRequestInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BuyerUpdateOneRequiredWithoutProcurementRequestsNestedInput = {
    create?: XOR<BuyerCreateWithoutProcurementRequestsInput, BuyerUncheckedCreateWithoutProcurementRequestsInput>
    connectOrCreate?: BuyerCreateOrConnectWithoutProcurementRequestsInput
    upsert?: BuyerUpsertWithoutProcurementRequestsInput
    connect?: BuyerWhereUniqueInput
    update?: XOR<XOR<BuyerUpdateToOneWithWhereWithoutProcurementRequestsInput, BuyerUpdateWithoutProcurementRequestsInput>, BuyerUncheckedUpdateWithoutProcurementRequestsInput>
  }

  export type QuoteUpdateManyWithoutRequestNestedInput = {
    create?: XOR<QuoteCreateWithoutRequestInput, QuoteUncheckedCreateWithoutRequestInput> | QuoteCreateWithoutRequestInput[] | QuoteUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: QuoteCreateOrConnectWithoutRequestInput | QuoteCreateOrConnectWithoutRequestInput[]
    upsert?: QuoteUpsertWithWhereUniqueWithoutRequestInput | QuoteUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: QuoteCreateManyRequestInputEnvelope
    set?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    disconnect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    delete?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    connect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    update?: QuoteUpdateWithWhereUniqueWithoutRequestInput | QuoteUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: QuoteUpdateManyWithWhereWithoutRequestInput | QuoteUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: QuoteScalarWhereInput | QuoteScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutRequestNestedInput = {
    create?: XOR<OrderCreateWithoutRequestInput, OrderUncheckedCreateWithoutRequestInput> | OrderCreateWithoutRequestInput[] | OrderUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutRequestInput | OrderCreateOrConnectWithoutRequestInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutRequestInput | OrderUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: OrderCreateManyRequestInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutRequestInput | OrderUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutRequestInput | OrderUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type QuoteUncheckedUpdateManyWithoutRequestNestedInput = {
    create?: XOR<QuoteCreateWithoutRequestInput, QuoteUncheckedCreateWithoutRequestInput> | QuoteCreateWithoutRequestInput[] | QuoteUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: QuoteCreateOrConnectWithoutRequestInput | QuoteCreateOrConnectWithoutRequestInput[]
    upsert?: QuoteUpsertWithWhereUniqueWithoutRequestInput | QuoteUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: QuoteCreateManyRequestInputEnvelope
    set?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    disconnect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    delete?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    connect?: QuoteWhereUniqueInput | QuoteWhereUniqueInput[]
    update?: QuoteUpdateWithWhereUniqueWithoutRequestInput | QuoteUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: QuoteUpdateManyWithWhereWithoutRequestInput | QuoteUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: QuoteScalarWhereInput | QuoteScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutRequestNestedInput = {
    create?: XOR<OrderCreateWithoutRequestInput, OrderUncheckedCreateWithoutRequestInput> | OrderCreateWithoutRequestInput[] | OrderUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutRequestInput | OrderCreateOrConnectWithoutRequestInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutRequestInput | OrderUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: OrderCreateManyRequestInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutRequestInput | OrderUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutRequestInput | OrderUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ProcurementRequestCreateNestedOneWithoutQuotesInput = {
    create?: XOR<ProcurementRequestCreateWithoutQuotesInput, ProcurementRequestUncheckedCreateWithoutQuotesInput>
    connectOrCreate?: ProcurementRequestCreateOrConnectWithoutQuotesInput
    connect?: ProcurementRequestWhereUniqueInput
  }

  export type VendorCreateNestedOneWithoutQuotesInput = {
    create?: XOR<VendorCreateWithoutQuotesInput, VendorUncheckedCreateWithoutQuotesInput>
    connectOrCreate?: VendorCreateOrConnectWithoutQuotesInput
    connect?: VendorWhereUniqueInput
  }

  export type NegotiationMessageCreateNestedManyWithoutQuoteInput = {
    create?: XOR<NegotiationMessageCreateWithoutQuoteInput, NegotiationMessageUncheckedCreateWithoutQuoteInput> | NegotiationMessageCreateWithoutQuoteInput[] | NegotiationMessageUncheckedCreateWithoutQuoteInput[]
    connectOrCreate?: NegotiationMessageCreateOrConnectWithoutQuoteInput | NegotiationMessageCreateOrConnectWithoutQuoteInput[]
    createMany?: NegotiationMessageCreateManyQuoteInputEnvelope
    connect?: NegotiationMessageWhereUniqueInput | NegotiationMessageWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutQuoteInput = {
    create?: XOR<OrderCreateWithoutQuoteInput, OrderUncheckedCreateWithoutQuoteInput> | OrderCreateWithoutQuoteInput[] | OrderUncheckedCreateWithoutQuoteInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutQuoteInput | OrderCreateOrConnectWithoutQuoteInput[]
    createMany?: OrderCreateManyQuoteInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type NegotiationMessageUncheckedCreateNestedManyWithoutQuoteInput = {
    create?: XOR<NegotiationMessageCreateWithoutQuoteInput, NegotiationMessageUncheckedCreateWithoutQuoteInput> | NegotiationMessageCreateWithoutQuoteInput[] | NegotiationMessageUncheckedCreateWithoutQuoteInput[]
    connectOrCreate?: NegotiationMessageCreateOrConnectWithoutQuoteInput | NegotiationMessageCreateOrConnectWithoutQuoteInput[]
    createMany?: NegotiationMessageCreateManyQuoteInputEnvelope
    connect?: NegotiationMessageWhereUniqueInput | NegotiationMessageWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutQuoteInput = {
    create?: XOR<OrderCreateWithoutQuoteInput, OrderUncheckedCreateWithoutQuoteInput> | OrderCreateWithoutQuoteInput[] | OrderUncheckedCreateWithoutQuoteInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutQuoteInput | OrderCreateOrConnectWithoutQuoteInput[]
    createMany?: OrderCreateManyQuoteInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ProcurementRequestUpdateOneRequiredWithoutQuotesNestedInput = {
    create?: XOR<ProcurementRequestCreateWithoutQuotesInput, ProcurementRequestUncheckedCreateWithoutQuotesInput>
    connectOrCreate?: ProcurementRequestCreateOrConnectWithoutQuotesInput
    upsert?: ProcurementRequestUpsertWithoutQuotesInput
    connect?: ProcurementRequestWhereUniqueInput
    update?: XOR<XOR<ProcurementRequestUpdateToOneWithWhereWithoutQuotesInput, ProcurementRequestUpdateWithoutQuotesInput>, ProcurementRequestUncheckedUpdateWithoutQuotesInput>
  }

  export type VendorUpdateOneRequiredWithoutQuotesNestedInput = {
    create?: XOR<VendorCreateWithoutQuotesInput, VendorUncheckedCreateWithoutQuotesInput>
    connectOrCreate?: VendorCreateOrConnectWithoutQuotesInput
    upsert?: VendorUpsertWithoutQuotesInput
    connect?: VendorWhereUniqueInput
    update?: XOR<XOR<VendorUpdateToOneWithWhereWithoutQuotesInput, VendorUpdateWithoutQuotesInput>, VendorUncheckedUpdateWithoutQuotesInput>
  }

  export type NegotiationMessageUpdateManyWithoutQuoteNestedInput = {
    create?: XOR<NegotiationMessageCreateWithoutQuoteInput, NegotiationMessageUncheckedCreateWithoutQuoteInput> | NegotiationMessageCreateWithoutQuoteInput[] | NegotiationMessageUncheckedCreateWithoutQuoteInput[]
    connectOrCreate?: NegotiationMessageCreateOrConnectWithoutQuoteInput | NegotiationMessageCreateOrConnectWithoutQuoteInput[]
    upsert?: NegotiationMessageUpsertWithWhereUniqueWithoutQuoteInput | NegotiationMessageUpsertWithWhereUniqueWithoutQuoteInput[]
    createMany?: NegotiationMessageCreateManyQuoteInputEnvelope
    set?: NegotiationMessageWhereUniqueInput | NegotiationMessageWhereUniqueInput[]
    disconnect?: NegotiationMessageWhereUniqueInput | NegotiationMessageWhereUniqueInput[]
    delete?: NegotiationMessageWhereUniqueInput | NegotiationMessageWhereUniqueInput[]
    connect?: NegotiationMessageWhereUniqueInput | NegotiationMessageWhereUniqueInput[]
    update?: NegotiationMessageUpdateWithWhereUniqueWithoutQuoteInput | NegotiationMessageUpdateWithWhereUniqueWithoutQuoteInput[]
    updateMany?: NegotiationMessageUpdateManyWithWhereWithoutQuoteInput | NegotiationMessageUpdateManyWithWhereWithoutQuoteInput[]
    deleteMany?: NegotiationMessageScalarWhereInput | NegotiationMessageScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutQuoteNestedInput = {
    create?: XOR<OrderCreateWithoutQuoteInput, OrderUncheckedCreateWithoutQuoteInput> | OrderCreateWithoutQuoteInput[] | OrderUncheckedCreateWithoutQuoteInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutQuoteInput | OrderCreateOrConnectWithoutQuoteInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutQuoteInput | OrderUpsertWithWhereUniqueWithoutQuoteInput[]
    createMany?: OrderCreateManyQuoteInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutQuoteInput | OrderUpdateWithWhereUniqueWithoutQuoteInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutQuoteInput | OrderUpdateManyWithWhereWithoutQuoteInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type NegotiationMessageUncheckedUpdateManyWithoutQuoteNestedInput = {
    create?: XOR<NegotiationMessageCreateWithoutQuoteInput, NegotiationMessageUncheckedCreateWithoutQuoteInput> | NegotiationMessageCreateWithoutQuoteInput[] | NegotiationMessageUncheckedCreateWithoutQuoteInput[]
    connectOrCreate?: NegotiationMessageCreateOrConnectWithoutQuoteInput | NegotiationMessageCreateOrConnectWithoutQuoteInput[]
    upsert?: NegotiationMessageUpsertWithWhereUniqueWithoutQuoteInput | NegotiationMessageUpsertWithWhereUniqueWithoutQuoteInput[]
    createMany?: NegotiationMessageCreateManyQuoteInputEnvelope
    set?: NegotiationMessageWhereUniqueInput | NegotiationMessageWhereUniqueInput[]
    disconnect?: NegotiationMessageWhereUniqueInput | NegotiationMessageWhereUniqueInput[]
    delete?: NegotiationMessageWhereUniqueInput | NegotiationMessageWhereUniqueInput[]
    connect?: NegotiationMessageWhereUniqueInput | NegotiationMessageWhereUniqueInput[]
    update?: NegotiationMessageUpdateWithWhereUniqueWithoutQuoteInput | NegotiationMessageUpdateWithWhereUniqueWithoutQuoteInput[]
    updateMany?: NegotiationMessageUpdateManyWithWhereWithoutQuoteInput | NegotiationMessageUpdateManyWithWhereWithoutQuoteInput[]
    deleteMany?: NegotiationMessageScalarWhereInput | NegotiationMessageScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutQuoteNestedInput = {
    create?: XOR<OrderCreateWithoutQuoteInput, OrderUncheckedCreateWithoutQuoteInput> | OrderCreateWithoutQuoteInput[] | OrderUncheckedCreateWithoutQuoteInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutQuoteInput | OrderCreateOrConnectWithoutQuoteInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutQuoteInput | OrderUpsertWithWhereUniqueWithoutQuoteInput[]
    createMany?: OrderCreateManyQuoteInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutQuoteInput | OrderUpdateWithWhereUniqueWithoutQuoteInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutQuoteInput | OrderUpdateManyWithWhereWithoutQuoteInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type QuoteCreateNestedOneWithoutNegotiationsInput = {
    create?: XOR<QuoteCreateWithoutNegotiationsInput, QuoteUncheckedCreateWithoutNegotiationsInput>
    connectOrCreate?: QuoteCreateOrConnectWithoutNegotiationsInput
    connect?: QuoteWhereUniqueInput
  }

  export type QuoteUpdateOneRequiredWithoutNegotiationsNestedInput = {
    create?: XOR<QuoteCreateWithoutNegotiationsInput, QuoteUncheckedCreateWithoutNegotiationsInput>
    connectOrCreate?: QuoteCreateOrConnectWithoutNegotiationsInput
    upsert?: QuoteUpsertWithoutNegotiationsInput
    connect?: QuoteWhereUniqueInput
    update?: XOR<XOR<QuoteUpdateToOneWithWhereWithoutNegotiationsInput, QuoteUpdateWithoutNegotiationsInput>, QuoteUncheckedUpdateWithoutNegotiationsInput>
  }

  export type ProcurementRequestCreateNestedOneWithoutOrdersInput = {
    create?: XOR<ProcurementRequestCreateWithoutOrdersInput, ProcurementRequestUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: ProcurementRequestCreateOrConnectWithoutOrdersInput
    connect?: ProcurementRequestWhereUniqueInput
  }

  export type QuoteCreateNestedOneWithoutOrdersInput = {
    create?: XOR<QuoteCreateWithoutOrdersInput, QuoteUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: QuoteCreateOrConnectWithoutOrdersInput
    connect?: QuoteWhereUniqueInput
  }

  export type BuyerCreateNestedOneWithoutOrdersInput = {
    create?: XOR<BuyerCreateWithoutOrdersInput, BuyerUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: BuyerCreateOrConnectWithoutOrdersInput
    connect?: BuyerWhereUniqueInput
  }

  export type VendorCreateNestedOneWithoutOrdersInput = {
    create?: XOR<VendorCreateWithoutOrdersInput, VendorUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: VendorCreateOrConnectWithoutOrdersInput
    connect?: VendorWhereUniqueInput
  }

  export type ProcurementRequestUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<ProcurementRequestCreateWithoutOrdersInput, ProcurementRequestUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: ProcurementRequestCreateOrConnectWithoutOrdersInput
    upsert?: ProcurementRequestUpsertWithoutOrdersInput
    connect?: ProcurementRequestWhereUniqueInput
    update?: XOR<XOR<ProcurementRequestUpdateToOneWithWhereWithoutOrdersInput, ProcurementRequestUpdateWithoutOrdersInput>, ProcurementRequestUncheckedUpdateWithoutOrdersInput>
  }

  export type QuoteUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<QuoteCreateWithoutOrdersInput, QuoteUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: QuoteCreateOrConnectWithoutOrdersInput
    upsert?: QuoteUpsertWithoutOrdersInput
    connect?: QuoteWhereUniqueInput
    update?: XOR<XOR<QuoteUpdateToOneWithWhereWithoutOrdersInput, QuoteUpdateWithoutOrdersInput>, QuoteUncheckedUpdateWithoutOrdersInput>
  }

  export type BuyerUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<BuyerCreateWithoutOrdersInput, BuyerUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: BuyerCreateOrConnectWithoutOrdersInput
    upsert?: BuyerUpsertWithoutOrdersInput
    connect?: BuyerWhereUniqueInput
    update?: XOR<XOR<BuyerUpdateToOneWithWhereWithoutOrdersInput, BuyerUpdateWithoutOrdersInput>, BuyerUncheckedUpdateWithoutOrdersInput>
  }

  export type VendorUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<VendorCreateWithoutOrdersInput, VendorUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: VendorCreateOrConnectWithoutOrdersInput
    upsert?: VendorUpsertWithoutOrdersInput
    connect?: VendorWhereUniqueInput
    update?: XOR<XOR<VendorUpdateToOneWithWhereWithoutOrdersInput, VendorUpdateWithoutOrdersInput>, VendorUncheckedUpdateWithoutOrdersInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type QuoteCreateWithoutVendorInput = {
    id?: string
    unitPrice: number
    totalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    notes?: string | null
    status?: string
    validUntil?: Date | string | null
    createdAt?: Date | string
    request: ProcurementRequestCreateNestedOneWithoutQuotesInput
    negotiations?: NegotiationMessageCreateNestedManyWithoutQuoteInput
    orders?: OrderCreateNestedManyWithoutQuoteInput
  }

  export type QuoteUncheckedCreateWithoutVendorInput = {
    id?: string
    requestId: string
    unitPrice: number
    totalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    notes?: string | null
    status?: string
    validUntil?: Date | string | null
    createdAt?: Date | string
    negotiations?: NegotiationMessageUncheckedCreateNestedManyWithoutQuoteInput
    orders?: OrderUncheckedCreateNestedManyWithoutQuoteInput
  }

  export type QuoteCreateOrConnectWithoutVendorInput = {
    where: QuoteWhereUniqueInput
    create: XOR<QuoteCreateWithoutVendorInput, QuoteUncheckedCreateWithoutVendorInput>
  }

  export type QuoteCreateManyVendorInputEnvelope = {
    data: QuoteCreateManyVendorInput | QuoteCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutVendorInput = {
    id?: string
    finalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    status?: string
    orderDate?: Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
    request: ProcurementRequestCreateNestedOneWithoutOrdersInput
    quote: QuoteCreateNestedOneWithoutOrdersInput
    buyer: BuyerCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutVendorInput = {
    id?: string
    requestId: string
    quoteId: string
    buyerId: string
    finalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    status?: string
    orderDate?: Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type OrderCreateOrConnectWithoutVendorInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutVendorInput, OrderUncheckedCreateWithoutVendorInput>
  }

  export type OrderCreateManyVendorInputEnvelope = {
    data: OrderCreateManyVendorInput | OrderCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type QuoteUpsertWithWhereUniqueWithoutVendorInput = {
    where: QuoteWhereUniqueInput
    update: XOR<QuoteUpdateWithoutVendorInput, QuoteUncheckedUpdateWithoutVendorInput>
    create: XOR<QuoteCreateWithoutVendorInput, QuoteUncheckedCreateWithoutVendorInput>
  }

  export type QuoteUpdateWithWhereUniqueWithoutVendorInput = {
    where: QuoteWhereUniqueInput
    data: XOR<QuoteUpdateWithoutVendorInput, QuoteUncheckedUpdateWithoutVendorInput>
  }

  export type QuoteUpdateManyWithWhereWithoutVendorInput = {
    where: QuoteScalarWhereInput
    data: XOR<QuoteUpdateManyMutationInput, QuoteUncheckedUpdateManyWithoutVendorInput>
  }

  export type QuoteScalarWhereInput = {
    AND?: QuoteScalarWhereInput | QuoteScalarWhereInput[]
    OR?: QuoteScalarWhereInput[]
    NOT?: QuoteScalarWhereInput | QuoteScalarWhereInput[]
    id?: StringFilter<"Quote"> | string
    requestId?: StringFilter<"Quote"> | string
    vendorId?: StringFilter<"Quote"> | string
    unitPrice?: FloatFilter<"Quote"> | number
    totalPrice?: FloatFilter<"Quote"> | number
    deliveryDate?: DateTimeFilter<"Quote"> | Date | string
    paymentTerms?: StringFilter<"Quote"> | string
    notes?: StringNullableFilter<"Quote"> | string | null
    status?: StringFilter<"Quote"> | string
    validUntil?: DateTimeNullableFilter<"Quote"> | Date | string | null
    createdAt?: DateTimeFilter<"Quote"> | Date | string
  }

  export type OrderUpsertWithWhereUniqueWithoutVendorInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutVendorInput, OrderUncheckedUpdateWithoutVendorInput>
    create: XOR<OrderCreateWithoutVendorInput, OrderUncheckedCreateWithoutVendorInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutVendorInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutVendorInput, OrderUncheckedUpdateWithoutVendorInput>
  }

  export type OrderUpdateManyWithWhereWithoutVendorInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutVendorInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: StringFilter<"Order"> | string
    requestId?: StringFilter<"Order"> | string
    quoteId?: StringFilter<"Order"> | string
    buyerId?: StringFilter<"Order"> | string
    vendorId?: StringFilter<"Order"> | string
    finalPrice?: FloatFilter<"Order"> | number
    deliveryDate?: DateTimeFilter<"Order"> | Date | string
    paymentTerms?: StringFilter<"Order"> | string
    status?: StringFilter<"Order"> | string
    orderDate?: DateTimeFilter<"Order"> | Date | string
    trackingInfo?: JsonNullableFilter<"Order">
  }

  export type ProcurementRequestCreateWithoutBuyerInput = {
    id?: string
    productName: string
    category: string
    quantity: number
    unit: string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate: Date | string
    deliveryAddress?: string | null
    maxBudget?: number | null
    status?: string
    urgency?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    quotes?: QuoteCreateNestedManyWithoutRequestInput
    orders?: OrderCreateNestedManyWithoutRequestInput
  }

  export type ProcurementRequestUncheckedCreateWithoutBuyerInput = {
    id?: string
    productName: string
    category: string
    quantity: number
    unit: string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate: Date | string
    deliveryAddress?: string | null
    maxBudget?: number | null
    status?: string
    urgency?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    quotes?: QuoteUncheckedCreateNestedManyWithoutRequestInput
    orders?: OrderUncheckedCreateNestedManyWithoutRequestInput
  }

  export type ProcurementRequestCreateOrConnectWithoutBuyerInput = {
    where: ProcurementRequestWhereUniqueInput
    create: XOR<ProcurementRequestCreateWithoutBuyerInput, ProcurementRequestUncheckedCreateWithoutBuyerInput>
  }

  export type ProcurementRequestCreateManyBuyerInputEnvelope = {
    data: ProcurementRequestCreateManyBuyerInput | ProcurementRequestCreateManyBuyerInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutBuyerInput = {
    id?: string
    finalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    status?: string
    orderDate?: Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
    request: ProcurementRequestCreateNestedOneWithoutOrdersInput
    quote: QuoteCreateNestedOneWithoutOrdersInput
    vendor: VendorCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutBuyerInput = {
    id?: string
    requestId: string
    quoteId: string
    vendorId: string
    finalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    status?: string
    orderDate?: Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type OrderCreateOrConnectWithoutBuyerInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutBuyerInput, OrderUncheckedCreateWithoutBuyerInput>
  }

  export type OrderCreateManyBuyerInputEnvelope = {
    data: OrderCreateManyBuyerInput | OrderCreateManyBuyerInput[]
    skipDuplicates?: boolean
  }

  export type ProcurementRequestUpsertWithWhereUniqueWithoutBuyerInput = {
    where: ProcurementRequestWhereUniqueInput
    update: XOR<ProcurementRequestUpdateWithoutBuyerInput, ProcurementRequestUncheckedUpdateWithoutBuyerInput>
    create: XOR<ProcurementRequestCreateWithoutBuyerInput, ProcurementRequestUncheckedCreateWithoutBuyerInput>
  }

  export type ProcurementRequestUpdateWithWhereUniqueWithoutBuyerInput = {
    where: ProcurementRequestWhereUniqueInput
    data: XOR<ProcurementRequestUpdateWithoutBuyerInput, ProcurementRequestUncheckedUpdateWithoutBuyerInput>
  }

  export type ProcurementRequestUpdateManyWithWhereWithoutBuyerInput = {
    where: ProcurementRequestScalarWhereInput
    data: XOR<ProcurementRequestUpdateManyMutationInput, ProcurementRequestUncheckedUpdateManyWithoutBuyerInput>
  }

  export type ProcurementRequestScalarWhereInput = {
    AND?: ProcurementRequestScalarWhereInput | ProcurementRequestScalarWhereInput[]
    OR?: ProcurementRequestScalarWhereInput[]
    NOT?: ProcurementRequestScalarWhereInput | ProcurementRequestScalarWhereInput[]
    id?: StringFilter<"ProcurementRequest"> | string
    buyerId?: StringFilter<"ProcurementRequest"> | string
    productName?: StringFilter<"ProcurementRequest"> | string
    category?: StringFilter<"ProcurementRequest"> | string
    quantity?: FloatFilter<"ProcurementRequest"> | number
    unit?: StringFilter<"ProcurementRequest"> | string
    specifications?: JsonNullableFilter<"ProcurementRequest">
    deliveryDate?: DateTimeFilter<"ProcurementRequest"> | Date | string
    deliveryAddress?: StringNullableFilter<"ProcurementRequest"> | string | null
    maxBudget?: FloatNullableFilter<"ProcurementRequest"> | number | null
    status?: StringFilter<"ProcurementRequest"> | string
    urgency?: StringFilter<"ProcurementRequest"> | string
    createdAt?: DateTimeFilter<"ProcurementRequest"> | Date | string
    updatedAt?: DateTimeFilter<"ProcurementRequest"> | Date | string
  }

  export type OrderUpsertWithWhereUniqueWithoutBuyerInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutBuyerInput, OrderUncheckedUpdateWithoutBuyerInput>
    create: XOR<OrderCreateWithoutBuyerInput, OrderUncheckedCreateWithoutBuyerInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutBuyerInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutBuyerInput, OrderUncheckedUpdateWithoutBuyerInput>
  }

  export type OrderUpdateManyWithWhereWithoutBuyerInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutBuyerInput>
  }

  export type BuyerCreateWithoutProcurementRequestsInput = {
    id?: string
    companyName: string
    email: string
    phone?: string | null
    address?: string | null
    industry?: string | null
    creditRating?: string
    paymentHistory?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    orders?: OrderCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUncheckedCreateWithoutProcurementRequestsInput = {
    id?: string
    companyName: string
    email: string
    phone?: string | null
    address?: string | null
    industry?: string | null
    creditRating?: string
    paymentHistory?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type BuyerCreateOrConnectWithoutProcurementRequestsInput = {
    where: BuyerWhereUniqueInput
    create: XOR<BuyerCreateWithoutProcurementRequestsInput, BuyerUncheckedCreateWithoutProcurementRequestsInput>
  }

  export type QuoteCreateWithoutRequestInput = {
    id?: string
    unitPrice: number
    totalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    notes?: string | null
    status?: string
    validUntil?: Date | string | null
    createdAt?: Date | string
    vendor: VendorCreateNestedOneWithoutQuotesInput
    negotiations?: NegotiationMessageCreateNestedManyWithoutQuoteInput
    orders?: OrderCreateNestedManyWithoutQuoteInput
  }

  export type QuoteUncheckedCreateWithoutRequestInput = {
    id?: string
    vendorId: string
    unitPrice: number
    totalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    notes?: string | null
    status?: string
    validUntil?: Date | string | null
    createdAt?: Date | string
    negotiations?: NegotiationMessageUncheckedCreateNestedManyWithoutQuoteInput
    orders?: OrderUncheckedCreateNestedManyWithoutQuoteInput
  }

  export type QuoteCreateOrConnectWithoutRequestInput = {
    where: QuoteWhereUniqueInput
    create: XOR<QuoteCreateWithoutRequestInput, QuoteUncheckedCreateWithoutRequestInput>
  }

  export type QuoteCreateManyRequestInputEnvelope = {
    data: QuoteCreateManyRequestInput | QuoteCreateManyRequestInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutRequestInput = {
    id?: string
    finalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    status?: string
    orderDate?: Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
    quote: QuoteCreateNestedOneWithoutOrdersInput
    buyer: BuyerCreateNestedOneWithoutOrdersInput
    vendor: VendorCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutRequestInput = {
    id?: string
    quoteId: string
    buyerId: string
    vendorId: string
    finalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    status?: string
    orderDate?: Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type OrderCreateOrConnectWithoutRequestInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutRequestInput, OrderUncheckedCreateWithoutRequestInput>
  }

  export type OrderCreateManyRequestInputEnvelope = {
    data: OrderCreateManyRequestInput | OrderCreateManyRequestInput[]
    skipDuplicates?: boolean
  }

  export type BuyerUpsertWithoutProcurementRequestsInput = {
    update: XOR<BuyerUpdateWithoutProcurementRequestsInput, BuyerUncheckedUpdateWithoutProcurementRequestsInput>
    create: XOR<BuyerCreateWithoutProcurementRequestsInput, BuyerUncheckedCreateWithoutProcurementRequestsInput>
    where?: BuyerWhereInput
  }

  export type BuyerUpdateToOneWithWhereWithoutProcurementRequestsInput = {
    where?: BuyerWhereInput
    data: XOR<BuyerUpdateWithoutProcurementRequestsInput, BuyerUncheckedUpdateWithoutProcurementRequestsInput>
  }

  export type BuyerUpdateWithoutProcurementRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    creditRating?: StringFieldUpdateOperationsInput | string
    paymentHistory?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerUncheckedUpdateWithoutProcurementRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    creditRating?: StringFieldUpdateOperationsInput | string
    paymentHistory?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type QuoteUpsertWithWhereUniqueWithoutRequestInput = {
    where: QuoteWhereUniqueInput
    update: XOR<QuoteUpdateWithoutRequestInput, QuoteUncheckedUpdateWithoutRequestInput>
    create: XOR<QuoteCreateWithoutRequestInput, QuoteUncheckedCreateWithoutRequestInput>
  }

  export type QuoteUpdateWithWhereUniqueWithoutRequestInput = {
    where: QuoteWhereUniqueInput
    data: XOR<QuoteUpdateWithoutRequestInput, QuoteUncheckedUpdateWithoutRequestInput>
  }

  export type QuoteUpdateManyWithWhereWithoutRequestInput = {
    where: QuoteScalarWhereInput
    data: XOR<QuoteUpdateManyMutationInput, QuoteUncheckedUpdateManyWithoutRequestInput>
  }

  export type OrderUpsertWithWhereUniqueWithoutRequestInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutRequestInput, OrderUncheckedUpdateWithoutRequestInput>
    create: XOR<OrderCreateWithoutRequestInput, OrderUncheckedCreateWithoutRequestInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutRequestInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutRequestInput, OrderUncheckedUpdateWithoutRequestInput>
  }

  export type OrderUpdateManyWithWhereWithoutRequestInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutRequestInput>
  }

  export type ProcurementRequestCreateWithoutQuotesInput = {
    id?: string
    productName: string
    category: string
    quantity: number
    unit: string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate: Date | string
    deliveryAddress?: string | null
    maxBudget?: number | null
    status?: string
    urgency?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer: BuyerCreateNestedOneWithoutProcurementRequestsInput
    orders?: OrderCreateNestedManyWithoutRequestInput
  }

  export type ProcurementRequestUncheckedCreateWithoutQuotesInput = {
    id?: string
    buyerId: string
    productName: string
    category: string
    quantity: number
    unit: string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate: Date | string
    deliveryAddress?: string | null
    maxBudget?: number | null
    status?: string
    urgency?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutRequestInput
  }

  export type ProcurementRequestCreateOrConnectWithoutQuotesInput = {
    where: ProcurementRequestWhereUniqueInput
    create: XOR<ProcurementRequestCreateWithoutQuotesInput, ProcurementRequestUncheckedCreateWithoutQuotesInput>
  }

  export type VendorCreateWithoutQuotesInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address?: string | null
    categories?: VendorCreatecategoriesInput | string[]
    rating?: number
    verified?: boolean
    minOrderValue?: number
    paymentTerms?: string
    createdAt?: Date | string
    orders?: OrderCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutQuotesInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address?: string | null
    categories?: VendorCreatecategoriesInput | string[]
    rating?: number
    verified?: boolean
    minOrderValue?: number
    paymentTerms?: string
    createdAt?: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutQuotesInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutQuotesInput, VendorUncheckedCreateWithoutQuotesInput>
  }

  export type NegotiationMessageCreateWithoutQuoteInput = {
    id?: string
    sender: string
    message: string
    proposedChanges?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type NegotiationMessageUncheckedCreateWithoutQuoteInput = {
    id?: string
    sender: string
    message: string
    proposedChanges?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type NegotiationMessageCreateOrConnectWithoutQuoteInput = {
    where: NegotiationMessageWhereUniqueInput
    create: XOR<NegotiationMessageCreateWithoutQuoteInput, NegotiationMessageUncheckedCreateWithoutQuoteInput>
  }

  export type NegotiationMessageCreateManyQuoteInputEnvelope = {
    data: NegotiationMessageCreateManyQuoteInput | NegotiationMessageCreateManyQuoteInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutQuoteInput = {
    id?: string
    finalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    status?: string
    orderDate?: Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
    request: ProcurementRequestCreateNestedOneWithoutOrdersInput
    buyer: BuyerCreateNestedOneWithoutOrdersInput
    vendor: VendorCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutQuoteInput = {
    id?: string
    requestId: string
    buyerId: string
    vendorId: string
    finalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    status?: string
    orderDate?: Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type OrderCreateOrConnectWithoutQuoteInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutQuoteInput, OrderUncheckedCreateWithoutQuoteInput>
  }

  export type OrderCreateManyQuoteInputEnvelope = {
    data: OrderCreateManyQuoteInput | OrderCreateManyQuoteInput[]
    skipDuplicates?: boolean
  }

  export type ProcurementRequestUpsertWithoutQuotesInput = {
    update: XOR<ProcurementRequestUpdateWithoutQuotesInput, ProcurementRequestUncheckedUpdateWithoutQuotesInput>
    create: XOR<ProcurementRequestCreateWithoutQuotesInput, ProcurementRequestUncheckedCreateWithoutQuotesInput>
    where?: ProcurementRequestWhereInput
  }

  export type ProcurementRequestUpdateToOneWithWhereWithoutQuotesInput = {
    where?: ProcurementRequestWhereInput
    data: XOR<ProcurementRequestUpdateWithoutQuotesInput, ProcurementRequestUncheckedUpdateWithoutQuotesInput>
  }

  export type ProcurementRequestUpdateWithoutQuotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryAddress?: NullableStringFieldUpdateOperationsInput | string | null
    maxBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    urgency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: BuyerUpdateOneRequiredWithoutProcurementRequestsNestedInput
    orders?: OrderUpdateManyWithoutRequestNestedInput
  }

  export type ProcurementRequestUncheckedUpdateWithoutQuotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    buyerId?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryAddress?: NullableStringFieldUpdateOperationsInput | string | null
    maxBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    urgency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type VendorUpsertWithoutQuotesInput = {
    update: XOR<VendorUpdateWithoutQuotesInput, VendorUncheckedUpdateWithoutQuotesInput>
    create: XOR<VendorCreateWithoutQuotesInput, VendorUncheckedCreateWithoutQuotesInput>
    where?: VendorWhereInput
  }

  export type VendorUpdateToOneWithWhereWithoutQuotesInput = {
    where?: VendorWhereInput
    data: XOR<VendorUpdateWithoutQuotesInput, VendorUncheckedUpdateWithoutQuotesInput>
  }

  export type VendorUpdateWithoutQuotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: VendorUpdatecategoriesInput | string[]
    rating?: FloatFieldUpdateOperationsInput | number
    verified?: BoolFieldUpdateOperationsInput | boolean
    minOrderValue?: FloatFieldUpdateOperationsInput | number
    paymentTerms?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutQuotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: VendorUpdatecategoriesInput | string[]
    rating?: FloatFieldUpdateOperationsInput | number
    verified?: BoolFieldUpdateOperationsInput | boolean
    minOrderValue?: FloatFieldUpdateOperationsInput | number
    paymentTerms?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type NegotiationMessageUpsertWithWhereUniqueWithoutQuoteInput = {
    where: NegotiationMessageWhereUniqueInput
    update: XOR<NegotiationMessageUpdateWithoutQuoteInput, NegotiationMessageUncheckedUpdateWithoutQuoteInput>
    create: XOR<NegotiationMessageCreateWithoutQuoteInput, NegotiationMessageUncheckedCreateWithoutQuoteInput>
  }

  export type NegotiationMessageUpdateWithWhereUniqueWithoutQuoteInput = {
    where: NegotiationMessageWhereUniqueInput
    data: XOR<NegotiationMessageUpdateWithoutQuoteInput, NegotiationMessageUncheckedUpdateWithoutQuoteInput>
  }

  export type NegotiationMessageUpdateManyWithWhereWithoutQuoteInput = {
    where: NegotiationMessageScalarWhereInput
    data: XOR<NegotiationMessageUpdateManyMutationInput, NegotiationMessageUncheckedUpdateManyWithoutQuoteInput>
  }

  export type NegotiationMessageScalarWhereInput = {
    AND?: NegotiationMessageScalarWhereInput | NegotiationMessageScalarWhereInput[]
    OR?: NegotiationMessageScalarWhereInput[]
    NOT?: NegotiationMessageScalarWhereInput | NegotiationMessageScalarWhereInput[]
    id?: StringFilter<"NegotiationMessage"> | string
    quoteId?: StringFilter<"NegotiationMessage"> | string
    sender?: StringFilter<"NegotiationMessage"> | string
    message?: StringFilter<"NegotiationMessage"> | string
    proposedChanges?: JsonNullableFilter<"NegotiationMessage">
    timestamp?: DateTimeFilter<"NegotiationMessage"> | Date | string
  }

  export type OrderUpsertWithWhereUniqueWithoutQuoteInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutQuoteInput, OrderUncheckedUpdateWithoutQuoteInput>
    create: XOR<OrderCreateWithoutQuoteInput, OrderUncheckedCreateWithoutQuoteInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutQuoteInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutQuoteInput, OrderUncheckedUpdateWithoutQuoteInput>
  }

  export type OrderUpdateManyWithWhereWithoutQuoteInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutQuoteInput>
  }

  export type QuoteCreateWithoutNegotiationsInput = {
    id?: string
    unitPrice: number
    totalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    notes?: string | null
    status?: string
    validUntil?: Date | string | null
    createdAt?: Date | string
    request: ProcurementRequestCreateNestedOneWithoutQuotesInput
    vendor: VendorCreateNestedOneWithoutQuotesInput
    orders?: OrderCreateNestedManyWithoutQuoteInput
  }

  export type QuoteUncheckedCreateWithoutNegotiationsInput = {
    id?: string
    requestId: string
    vendorId: string
    unitPrice: number
    totalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    notes?: string | null
    status?: string
    validUntil?: Date | string | null
    createdAt?: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutQuoteInput
  }

  export type QuoteCreateOrConnectWithoutNegotiationsInput = {
    where: QuoteWhereUniqueInput
    create: XOR<QuoteCreateWithoutNegotiationsInput, QuoteUncheckedCreateWithoutNegotiationsInput>
  }

  export type QuoteUpsertWithoutNegotiationsInput = {
    update: XOR<QuoteUpdateWithoutNegotiationsInput, QuoteUncheckedUpdateWithoutNegotiationsInput>
    create: XOR<QuoteCreateWithoutNegotiationsInput, QuoteUncheckedCreateWithoutNegotiationsInput>
    where?: QuoteWhereInput
  }

  export type QuoteUpdateToOneWithWhereWithoutNegotiationsInput = {
    where?: QuoteWhereInput
    data: XOR<QuoteUpdateWithoutNegotiationsInput, QuoteUncheckedUpdateWithoutNegotiationsInput>
  }

  export type QuoteUpdateWithoutNegotiationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: ProcurementRequestUpdateOneRequiredWithoutQuotesNestedInput
    vendor?: VendorUpdateOneRequiredWithoutQuotesNestedInput
    orders?: OrderUpdateManyWithoutQuoteNestedInput
  }

  export type QuoteUncheckedUpdateWithoutNegotiationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutQuoteNestedInput
  }

  export type ProcurementRequestCreateWithoutOrdersInput = {
    id?: string
    productName: string
    category: string
    quantity: number
    unit: string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate: Date | string
    deliveryAddress?: string | null
    maxBudget?: number | null
    status?: string
    urgency?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer: BuyerCreateNestedOneWithoutProcurementRequestsInput
    quotes?: QuoteCreateNestedManyWithoutRequestInput
  }

  export type ProcurementRequestUncheckedCreateWithoutOrdersInput = {
    id?: string
    buyerId: string
    productName: string
    category: string
    quantity: number
    unit: string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate: Date | string
    deliveryAddress?: string | null
    maxBudget?: number | null
    status?: string
    urgency?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    quotes?: QuoteUncheckedCreateNestedManyWithoutRequestInput
  }

  export type ProcurementRequestCreateOrConnectWithoutOrdersInput = {
    where: ProcurementRequestWhereUniqueInput
    create: XOR<ProcurementRequestCreateWithoutOrdersInput, ProcurementRequestUncheckedCreateWithoutOrdersInput>
  }

  export type QuoteCreateWithoutOrdersInput = {
    id?: string
    unitPrice: number
    totalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    notes?: string | null
    status?: string
    validUntil?: Date | string | null
    createdAt?: Date | string
    request: ProcurementRequestCreateNestedOneWithoutQuotesInput
    vendor: VendorCreateNestedOneWithoutQuotesInput
    negotiations?: NegotiationMessageCreateNestedManyWithoutQuoteInput
  }

  export type QuoteUncheckedCreateWithoutOrdersInput = {
    id?: string
    requestId: string
    vendorId: string
    unitPrice: number
    totalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    notes?: string | null
    status?: string
    validUntil?: Date | string | null
    createdAt?: Date | string
    negotiations?: NegotiationMessageUncheckedCreateNestedManyWithoutQuoteInput
  }

  export type QuoteCreateOrConnectWithoutOrdersInput = {
    where: QuoteWhereUniqueInput
    create: XOR<QuoteCreateWithoutOrdersInput, QuoteUncheckedCreateWithoutOrdersInput>
  }

  export type BuyerCreateWithoutOrdersInput = {
    id?: string
    companyName: string
    email: string
    phone?: string | null
    address?: string | null
    industry?: string | null
    creditRating?: string
    paymentHistory?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    procurementRequests?: ProcurementRequestCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUncheckedCreateWithoutOrdersInput = {
    id?: string
    companyName: string
    email: string
    phone?: string | null
    address?: string | null
    industry?: string | null
    creditRating?: string
    paymentHistory?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    procurementRequests?: ProcurementRequestUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type BuyerCreateOrConnectWithoutOrdersInput = {
    where: BuyerWhereUniqueInput
    create: XOR<BuyerCreateWithoutOrdersInput, BuyerUncheckedCreateWithoutOrdersInput>
  }

  export type VendorCreateWithoutOrdersInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address?: string | null
    categories?: VendorCreatecategoriesInput | string[]
    rating?: number
    verified?: boolean
    minOrderValue?: number
    paymentTerms?: string
    createdAt?: Date | string
    quotes?: QuoteCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutOrdersInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address?: string | null
    categories?: VendorCreatecategoriesInput | string[]
    rating?: number
    verified?: boolean
    minOrderValue?: number
    paymentTerms?: string
    createdAt?: Date | string
    quotes?: QuoteUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutOrdersInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutOrdersInput, VendorUncheckedCreateWithoutOrdersInput>
  }

  export type ProcurementRequestUpsertWithoutOrdersInput = {
    update: XOR<ProcurementRequestUpdateWithoutOrdersInput, ProcurementRequestUncheckedUpdateWithoutOrdersInput>
    create: XOR<ProcurementRequestCreateWithoutOrdersInput, ProcurementRequestUncheckedCreateWithoutOrdersInput>
    where?: ProcurementRequestWhereInput
  }

  export type ProcurementRequestUpdateToOneWithWhereWithoutOrdersInput = {
    where?: ProcurementRequestWhereInput
    data: XOR<ProcurementRequestUpdateWithoutOrdersInput, ProcurementRequestUncheckedUpdateWithoutOrdersInput>
  }

  export type ProcurementRequestUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryAddress?: NullableStringFieldUpdateOperationsInput | string | null
    maxBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    urgency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: BuyerUpdateOneRequiredWithoutProcurementRequestsNestedInput
    quotes?: QuoteUpdateManyWithoutRequestNestedInput
  }

  export type ProcurementRequestUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    buyerId?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryAddress?: NullableStringFieldUpdateOperationsInput | string | null
    maxBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    urgency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotes?: QuoteUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type QuoteUpsertWithoutOrdersInput = {
    update: XOR<QuoteUpdateWithoutOrdersInput, QuoteUncheckedUpdateWithoutOrdersInput>
    create: XOR<QuoteCreateWithoutOrdersInput, QuoteUncheckedCreateWithoutOrdersInput>
    where?: QuoteWhereInput
  }

  export type QuoteUpdateToOneWithWhereWithoutOrdersInput = {
    where?: QuoteWhereInput
    data: XOR<QuoteUpdateWithoutOrdersInput, QuoteUncheckedUpdateWithoutOrdersInput>
  }

  export type QuoteUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: ProcurementRequestUpdateOneRequiredWithoutQuotesNestedInput
    vendor?: VendorUpdateOneRequiredWithoutQuotesNestedInput
    negotiations?: NegotiationMessageUpdateManyWithoutQuoteNestedInput
  }

  export type QuoteUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    negotiations?: NegotiationMessageUncheckedUpdateManyWithoutQuoteNestedInput
  }

  export type BuyerUpsertWithoutOrdersInput = {
    update: XOR<BuyerUpdateWithoutOrdersInput, BuyerUncheckedUpdateWithoutOrdersInput>
    create: XOR<BuyerCreateWithoutOrdersInput, BuyerUncheckedCreateWithoutOrdersInput>
    where?: BuyerWhereInput
  }

  export type BuyerUpdateToOneWithWhereWithoutOrdersInput = {
    where?: BuyerWhereInput
    data: XOR<BuyerUpdateWithoutOrdersInput, BuyerUncheckedUpdateWithoutOrdersInput>
  }

  export type BuyerUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    creditRating?: StringFieldUpdateOperationsInput | string
    paymentHistory?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    procurementRequests?: ProcurementRequestUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    creditRating?: StringFieldUpdateOperationsInput | string
    paymentHistory?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    procurementRequests?: ProcurementRequestUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type VendorUpsertWithoutOrdersInput = {
    update: XOR<VendorUpdateWithoutOrdersInput, VendorUncheckedUpdateWithoutOrdersInput>
    create: XOR<VendorCreateWithoutOrdersInput, VendorUncheckedCreateWithoutOrdersInput>
    where?: VendorWhereInput
  }

  export type VendorUpdateToOneWithWhereWithoutOrdersInput = {
    where?: VendorWhereInput
    data: XOR<VendorUpdateWithoutOrdersInput, VendorUncheckedUpdateWithoutOrdersInput>
  }

  export type VendorUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: VendorUpdatecategoriesInput | string[]
    rating?: FloatFieldUpdateOperationsInput | number
    verified?: BoolFieldUpdateOperationsInput | boolean
    minOrderValue?: FloatFieldUpdateOperationsInput | number
    paymentTerms?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotes?: QuoteUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: VendorUpdatecategoriesInput | string[]
    rating?: FloatFieldUpdateOperationsInput | number
    verified?: BoolFieldUpdateOperationsInput | boolean
    minOrderValue?: FloatFieldUpdateOperationsInput | number
    paymentTerms?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotes?: QuoteUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type QuoteCreateManyVendorInput = {
    id?: string
    requestId: string
    unitPrice: number
    totalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    notes?: string | null
    status?: string
    validUntil?: Date | string | null
    createdAt?: Date | string
  }

  export type OrderCreateManyVendorInput = {
    id?: string
    requestId: string
    quoteId: string
    buyerId: string
    finalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    status?: string
    orderDate?: Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type QuoteUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: ProcurementRequestUpdateOneRequiredWithoutQuotesNestedInput
    negotiations?: NegotiationMessageUpdateManyWithoutQuoteNestedInput
    orders?: OrderUpdateManyWithoutQuoteNestedInput
  }

  export type QuoteUncheckedUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    negotiations?: NegotiationMessageUncheckedUpdateManyWithoutQuoteNestedInput
    orders?: OrderUncheckedUpdateManyWithoutQuoteNestedInput
  }

  export type QuoteUncheckedUpdateManyWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    finalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
    request?: ProcurementRequestUpdateOneRequiredWithoutOrdersNestedInput
    quote?: QuoteUpdateOneRequiredWithoutOrdersNestedInput
    buyer?: BuyerUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    quoteId?: StringFieldUpdateOperationsInput | string
    buyerId?: StringFieldUpdateOperationsInput | string
    finalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type OrderUncheckedUpdateManyWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    quoteId?: StringFieldUpdateOperationsInput | string
    buyerId?: StringFieldUpdateOperationsInput | string
    finalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProcurementRequestCreateManyBuyerInput = {
    id?: string
    productName: string
    category: string
    quantity: number
    unit: string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate: Date | string
    deliveryAddress?: string | null
    maxBudget?: number | null
    status?: string
    urgency?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderCreateManyBuyerInput = {
    id?: string
    requestId: string
    quoteId: string
    vendorId: string
    finalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    status?: string
    orderDate?: Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProcurementRequestUpdateWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryAddress?: NullableStringFieldUpdateOperationsInput | string | null
    maxBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    urgency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotes?: QuoteUpdateManyWithoutRequestNestedInput
    orders?: OrderUpdateManyWithoutRequestNestedInput
  }

  export type ProcurementRequestUncheckedUpdateWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryAddress?: NullableStringFieldUpdateOperationsInput | string | null
    maxBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    urgency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotes?: QuoteUncheckedUpdateManyWithoutRequestNestedInput
    orders?: OrderUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type ProcurementRequestUncheckedUpdateManyWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    specifications?: NullableJsonNullValueInput | InputJsonValue
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveryAddress?: NullableStringFieldUpdateOperationsInput | string | null
    maxBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    urgency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    finalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
    request?: ProcurementRequestUpdateOneRequiredWithoutOrdersNestedInput
    quote?: QuoteUpdateOneRequiredWithoutOrdersNestedInput
    vendor?: VendorUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    quoteId?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    finalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type OrderUncheckedUpdateManyWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    quoteId?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    finalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type QuoteCreateManyRequestInput = {
    id?: string
    vendorId: string
    unitPrice: number
    totalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    notes?: string | null
    status?: string
    validUntil?: Date | string | null
    createdAt?: Date | string
  }

  export type OrderCreateManyRequestInput = {
    id?: string
    quoteId: string
    buyerId: string
    vendorId: string
    finalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    status?: string
    orderDate?: Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type QuoteUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneRequiredWithoutQuotesNestedInput
    negotiations?: NegotiationMessageUpdateManyWithoutQuoteNestedInput
    orders?: OrderUpdateManyWithoutQuoteNestedInput
  }

  export type QuoteUncheckedUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    negotiations?: NegotiationMessageUncheckedUpdateManyWithoutQuoteNestedInput
    orders?: OrderUncheckedUpdateManyWithoutQuoteNestedInput
  }

  export type QuoteUncheckedUpdateManyWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    finalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
    quote?: QuoteUpdateOneRequiredWithoutOrdersNestedInput
    buyer?: BuyerUpdateOneRequiredWithoutOrdersNestedInput
    vendor?: VendorUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    quoteId?: StringFieldUpdateOperationsInput | string
    buyerId?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    finalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type OrderUncheckedUpdateManyWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    quoteId?: StringFieldUpdateOperationsInput | string
    buyerId?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    finalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NegotiationMessageCreateManyQuoteInput = {
    id?: string
    sender: string
    message: string
    proposedChanges?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type OrderCreateManyQuoteInput = {
    id?: string
    requestId: string
    buyerId: string
    vendorId: string
    finalPrice: number
    deliveryDate: Date | string
    paymentTerms: string
    status?: string
    orderDate?: Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NegotiationMessageUpdateWithoutQuoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    proposedChanges?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NegotiationMessageUncheckedUpdateWithoutQuoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    proposedChanges?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NegotiationMessageUncheckedUpdateManyWithoutQuoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    proposedChanges?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutQuoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    finalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
    request?: ProcurementRequestUpdateOneRequiredWithoutOrdersNestedInput
    buyer?: BuyerUpdateOneRequiredWithoutOrdersNestedInput
    vendor?: VendorUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutQuoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    buyerId?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    finalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }

  export type OrderUncheckedUpdateManyWithoutQuoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestId?: StringFieldUpdateOperationsInput | string
    buyerId?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    finalPrice?: FloatFieldUpdateOperationsInput | number
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTerms?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trackingInfo?: NullableJsonNullValueInput | InputJsonValue
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}