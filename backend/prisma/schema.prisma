// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vendor {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  phone        String?
  address      String?
  categories   String[]
  rating       Float    @default(0)
  verified     Boolean  @default(false)
  minOrderValue Float   @default(0)
  paymentTerms String   @default("NET 30")
  createdAt    DateTime @default(now())

  quotes       Quote[]
  orders       Order[]

  @@map("vendors")
}

model Buyer {
  id             String   @id @default(cuid())
  companyName    String
  email          String   @unique
  phone          String?
  address        String?
  industry       String?
  creditRating   String   @default("B")
  paymentHistory Json?
  createdAt      DateTime @default(now())

  procurementRequests ProcurementRequest[]
  orders             Order[]

  @@map("buyers")
}

model ProcurementRequest {
  id              String   @id @default(cuid())
  buyerId         String
  productName     String
  category        String
  quantity        Float
  unit            String
  specifications  Json?
  deliveryDate    DateTime
  deliveryAddress String?
  maxBudget       Float?
  status          String   @default("open") // open, negotiating, awarded, completed, cancelled
  urgency         String   @default("medium") // low, medium, high
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  buyer           Buyer    @relation(fields: [buyerId], references: [id])
  quotes          Quote[]
  orders          Order[]

  @@map("procurement_requests")
}

model Quote {
  id            String   @id @default(cuid())
  requestId     String
  vendorId      String
  unitPrice     Float
  totalPrice    Float
  deliveryDate  DateTime
  paymentTerms  String
  notes         String?
  status        String   @default("pending") // pending, accepted, rejected, countered
  validUntil    DateTime?
  createdAt     DateTime @default(now())

  request       ProcurementRequest @relation(fields: [requestId], references: [id])
  vendor        Vendor            @relation(fields: [vendorId], references: [id])
  negotiations  NegotiationMessage[]
  orders        Order[]

  @@map("quotes")
}

model NegotiationMessage {
  id              String   @id @default(cuid())
  quoteId         String
  sender          String   // 'buyer', 'vendor', 'ai-agent'
  message         String
  proposedChanges Json?
  timestamp       DateTime @default(now())

  quote           Quote    @relation(fields: [quoteId], references: [id])

  @@map("negotiation_messages")
}

model Order {
  id           String   @id @default(cuid())
  requestId    String
  quoteId      String
  buyerId      String
  vendorId     String
  finalPrice   Float
  deliveryDate DateTime
  paymentTerms String
  status       String   @default("confirmed") // confirmed, shipped, delivered, paid, completed
  orderDate    DateTime @default(now())
  trackingInfo Json?

  request      ProcurementRequest @relation(fields: [requestId], references: [id])
  quote        Quote             @relation(fields: [quoteId], references: [id])
  buyer        Buyer             @relation(fields: [buyerId], references: [id])
  vendor       Vendor            @relation(fields: [vendorId], references: [id])

  @@map("orders")
}
